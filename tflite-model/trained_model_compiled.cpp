/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 08.05.2023 20:47:24

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242432;
#else
constexpr int kTensorArenaSize = 241408;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 49,-2,31, -4,-21,16, -127,-118,-66, 
  /* [1][1][][] */ 4,-5,-2, -20,4,-5, 2,-29,8, 
  /* [1][2][][] */ -4,14,-6, -4,6,-4, 40,-18,13, 
  /* [2][0][][] */ 26,5,-11, 58,113,-6, 45,-24,3, 
  /* [2][1][][] */ 7,22,-4, 57,127,-29, 25,7,-9, 
  /* [2][2][][] */ 52,-46,20, 75,-24,-16, 40,-35,16, 
  /* [3][0][][] */ -2,26,-3, 23,83,13, -3,6,-5, 
  /* [3][1][][] */ 16,33,2, 61,127,25, -18,-16,1, 
  /* [3][2][][] */ -1,1,0, 22,29,9, -6,-4,-1, 
  /* [4][0][][] */ 25,55,-19, 3,69,-15, -21,9,0, 
  /* [4][1][][] */ 36,88,47, 25,120,34, 28,61,-5, 
  /* [4][2][][] */ 52,86,39, 44,127,22, -16,34,30, 
  /* [5][0][][] */ 7,7,-123, -4,5,-112, -4,33,-28, 
  /* [5][1][][] */ 9,-33,-127, -1,-38,-125, 0,17,-27, 
  /* [5][2][][] */ 1,17,-11, 4,5,-8, 3,18,-11, 
  /* [6][0][][] */ 18,-61,40, 43,-86,47, 7,-19,14, 
  /* [6][1][][] */ 32,-95,69, 59,-127,80, 5,-27,24, 
  /* [6][2][][] */ 16,-34,19, 9,-44,32, -13,10,6, 
  /* [7][0][][] */ -39,15,3, -109,-41,1, -24,28,6, 
  /* [7][1][][] */ -19,-7,2, -127,-92,-5, -5,0,10, 
  /* [7][2][][] */ -28,34,-7, -18,13,0, -24,28,1, 
  /* [8][0][][] */ 55,86,86, 62,92,98, 73,93,122, 
  /* [8][1][][] */ 52,85,93, 46,85,118, 66,90,123, 
  /* [8][2][][] */ 40,84,119, 32,87,122, 50,116,127, 
  /* [9][0][][] */ -15,-2,12, -11,-9,-1, 0,-1,-14, 
  /* [9][1][][] */ 108,117,-13, 79,127,8, -12,17,25, 
  /* [9][2][][] */ -28,-29,12, -3,-40,-8, 8,0,-24, 
  /* [10][0][][] */ -25,-84,-19, 34,94,19, -9,-14,-3, 
  /* [10][1][][] */ -59,-103,-14, 79,127,14, -17,-27,-1, 
  /* [10][2][][] */ -31,-19,2, 37,23,-11, -9,-1,6, 
  /* [11][0][][] */ -8,-8,14, 12,-21,19, 25,-57,-16, 
  /* [11][1][][] */ -36,-24,-4, -27,-41,-20, 8,-20,-16, 
  /* [11][2][][] */ 14,-12,-44, 118,127,73, -6,38,-13, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-98,-18, -62,-112,-26, -9,-18,-6, 
  /* [13][1][][] */ 61,114,15, 58,127,24, 7,15,11, 
  /* [13][2][][] */ -9,-20,3, 1,-19,-2, 0,4,-4, 
  /* [14][0][][] */ 49,-3,-33, 81,-22,-44, 35,-6,-16, 
  /* [14][1][][] */ 89,-14,-68, 127,-36,-81, 58,-18,-33, 
  /* [14][2][][] */ 55,-9,-42, 73,-21,-48, 24,-11,-19, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant2_scale = { 16, { 3.3410194077987398e-07, 0.042514819651842117, 0.037141378968954086, 0.011166466400027275, 0.0025544201489537954, 0.044113617390394211, 0.013645090162754059, 0.056892462074756622, 0.0012093710247427225, 0.011984027922153473, 0.020533444359898567, 0.0083091594278812408, 2.9411381774480105e-07, 0.017259309068322182, 0.0076978919096291065, 3.1706054670621597e-08, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { -1073741824, 12288, -114310, 25726, 339100, 6073, 57730, 3587, -148280, 42256, 38563, 155434, -1073741824, 57218, 74974, -1073741824, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 1.3102037232926023e-09, 0.00016672479978296906, 0.00014565247693099082, 4.3790067138615996e-05, 1.0017334716394544e-05, 0.00017299459432251751, 5.3510160796577111e-05, 0.00022310770873446018, 4.7426319724763744e-06, 4.6996192395454273e-05, 8.0523313954472542e-05, 3.2584939617663622e-05, 1.1533876076441629e-09, 6.768356979591772e-05, 3.0187813536031172e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-83,-127,39,-67,80,-76,-90,-3,-8,30,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,50,-105,5,127,-25, 24,-24,90,-2,-72,68,-93,78,-95,-27,4,-15,61,1,-101,-29, 
  /* [0][1][][] */ -127,127,-22,13,-43,17,-27,14,-28,0,3,-108,-49,8,-29,-14, -78,-42,-57,-15,-7,-25,9,-27,-108,-89,21,-13,-104,-127,1,23, 14,1,65,2,3,34,-24,34,-127,6,-2,2,-21,12,-4,43, 
  /* [0][2][][] */ -115,-73,68,2,-6,40,-38,53,-76,0,-1,3,40,2,-27,23, 23,-4,31,-2,-27,41,-33,21,-125,-13,0,83,-58,0,-28,-111, 21,-7,19,0,4,15,10,22,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant4_scale = { 16, { 0.079427838325500488, 0.0052980487234890461, 0.0077450564131140709, 0.011238968931138515, 0.0065362211316823959, 0.0041045872494578362, 0.016380691900849342, 0.0090179173275828362, 0.00082559877773746848, 0.011148544028401375, 0.0083225462585687637, 0.031060377135872841, 0.030907778069376945, 0.010258711874485016, 0.0074111572466790676, 0.16606816649436951, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[16] = { -161, 21144, 22057, 13321, 11483, 34372, 12365, 18411, -13131, 7050, 29814, 14508, -445, 26650, 12068, -107, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 0.0018688903655856848, 0.00012465997133404016, 0.00018223663209937513, 0.00026444633840583265, 0.00015379344404209405, 9.6578522061463445e-05, 0.00038542805123142898, 0.00021218629262875766, 1.9425853679422289e-05, 0.00026231867377646267, 0.00019582462846301496, 0.00073083239840343595, 0.00072724185883998871, 0.00024138146545737982, 0.00017438016948290169, 0.003907486330717802, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*16] = { 
  /* [0][0][][] */ 0,-14,0,-4,124,-1,-8,-1,1,-127,-85,-5,0,118,-7,0, 
  /* [1][0][][] */ 0,-26,-2,85,67,10,19,6,1,-10,127,-43,0,26,-16,0, 
  /* [2][0][][] */ 0,2,0,-12,-57,1,11,-2,0,5,-18,-1,0,127,-8,0, 
  /* [3][0][][] */ 0,-8,-22,-127,88,23,71,17,1,65,-2,42,0,1,14,0, 
  /* [4][0][][] */ 0,45,-24,36,-56,28,127,1,-2,-62,16,-11,0,-9,2,0, 
  /* [5][0][][] */ 0,-18,-16,1,-23,-23,-8,14,-1,11,-6,-48,0,-5,127,0, 
  /* [6][0][][] */ 0,16,-7,6,50,-16,-20,-3,-1,-102,112,65,0,127,63,0, 
  /* [7][0][][] */ 0,11,-16,127,6,1,19,13,1,66,-48,73,0,-6,46,0, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant6_scale = { 8, { 0.10053599625825882, 0.087771035730838776, 0.10056620091199875, 0.043812450021505356, 0.050834093242883682, 0.080655544996261597, 0.061018344014883041, 0.04150313138961792, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { 1224, -39626, -7650, -13619, -28600, -1998, -27571, -29233, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.0023655528202652931, 0.002065200824290514, 0.0023662636522203684, 0.0010308811906725168, 0.001196096302010119, 0.0018977775471284986, 0.0014357257168740034, 0.00097654428100213408, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ 10,-127,41,-39,18,-20,-43,24, 
  /* [1][0][][] */ 68,59,-24,-85,10,-15,-66,127, 
  /* [2][0][][] */ 28,13,-35,127,51,120,44,95, 
  /* [3][0][][] */ 76,65,-84,127,-102,-12,-1,21, 
  /* [4][0][][] */ -33,-90,81,9,4,27,-40,-127, 
  /* [5][0][][] */ 20,13,-36,35,-4,-35,46,127, 
  /* [6][0][][] */ 56,-38,-127,-85,99,11,41,-35, 
  /* [7][0][][] */ 127,20,23,-26,30,-4,86,-66, 
  /* [8][0][][] */ 15,-112,-1,106,5,18,-6,-127, 
  /* [9][0][][] */ 109,-127,9,-4,-14,11,-110,81, 
  /* [10][0][][] */ -127,-30,-112,21,-15,26,-97,61, 
  /* [11][0][][] */ -27,-40,-1,-99,-127,-32,54,-12, 
  /* [12][0][][] */ 12,5,-34,69,-81,-23,57,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -9,-28,-7,19,52,127,48,43, 
  /* [15][0][][] */ 49,6,26,-127,71,53,-63,73, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 19,21,127,25,-26,-10,32,31, 
  /* [18][0][][] */ 91,-127,17,26,-3,22,-112,-2, 
  /* [19][0][][] */ -127,-18,28,75,-54,-49,-90,65, 
  /* [20][0][][] */ 33,31,-37,104,-22,-127,3,50, 
  /* [21][0][][] */ 65,18,127,5,-5,-14,58,9, 
  /* [22][0][][] */ -68,-13,-127,-2,10,0,-109,9, 
  /* [23][0][][] */ -97,114,-23,-24,8,-10,127,-81, 
  /* [24][0][][] */ 4,-55,-57,80,-6,-63,103,127, 
  /* [25][0][][] */ 10,43,33,23,127,100,-81,-50, 
  /* [26][0][][] */ -86,-31,-127,-4,3,17,-90,-6, 
  /* [27][0][][] */ 2,-20,-25,-3,-10,127,44,56, 
  /* [28][0][][] */ 11,-16,-19,37,30,127,51,67, 
  /* [29][0][][] */ 92,27,127,-5,-14,-9,79,-3, 
  /* [30][0][][] */ -86,127,-34,-33,11,-14,116,-42, 
  /* [31][0][][] */ -36,-86,-14,9,23,-64,127,120, 
  /* [32][0][][] */ 3,15,-54,127,-3,91,84,122, 
  /* [33][0][][] */ 5,60,-15,-99,14,-23,-4,127, 
  /* [34][0][][] */ -24,75,-15,-97,29,-9,32,127, 
  /* [35][0][][] */ 127,6,-23,-40,39,27,100,-46, 
  /* [36][0][][] */ -127,5,28,62,-29,21,-104,91, 
  /* [37][0][][] */ -6,-31,-18,39,35,127,60,60, 
  /* [38][0][][] */ 16,19,5,81,127,-20,-23,34, 
  /* [39][0][][] */ 1,27,29,-127,33,-10,-42,127, 
  /* [40][0][][] */ 92,35,127,2,-16,-6,99,-9, 
  /* [41][0][][] */ -2,-30,-31,91,64,127,69,112, 
  /* [42][0][][] */ -80,1,127,16,-39,18,-38,64, 
  /* [43][0][][] */ -13,-54,4,101,-22,2,17,-127, 
  /* [44][0][][] */ 38,-21,-80,-126,74,-32,4,-127, 
  /* [45][0][][] */ -100,127,-11,-70,22,2,75,-63, 
  /* [46][0][][] */ -127,-28,47,29,-28,40,-88,49, 
  /* [47][0][][] */ 100,18,113,4,11,-28,127,-3, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0011532432399690151, 0.00097670138347893953, 0.00065945583628490567, 0.00063160830177366734, 0.00056240410776808858, 0.00061340973479673266, 0.00072328210808336735, 0.0026535855140537024, 0.00077379896538332105, 0.0051537198014557362, 0.0013137233909219503, 0.0038962082471698523, 0.0003540491743478924, 3.937008052901092e-09, 0.0020105468574911356, 0.00028305416344664991, 3.937008052901092e-09, 0.012728715315461159, 0.00088609452359378338, 0.00065575609914958477, 0.00061599555192515254, 0.0093492278829216957, 0.0007137637585401535, 0.0032602520659565926, 0.0019030250841751695, 0.0012860911665484309, 0.004538556095212698, 0.0047550387680530548, 0.00054748193360865116, 0.0034029784146696329, 0.0023980529513210058, 0.00029060253291390836, 0.00041242665611207485, 0.019265539944171906, 0.0009461871231906116, 0.0011499273823574185, 0.0081077050417661667, 0.00060134846717119217, 0.0053494782187044621, 0.00051679823081940413, 0.0025335834361612797, 0.00033565654302947223, 0.0008904357673600316, 0.017931440845131874, 0.00070504035102203488, 0.00097819138318300247, 0.00052533356938511133, 0.00039383771945722401, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { 3650, 10, 9637, 5823, 7045, 6685, 10590, -44, 23, -285, 2300, 390, 12261, -82072856, 2601, 23328, -66253468, -112, -448, 11732, 3352, -8, 28, 401, 3927, -743, 50, 538, 4174, 1700, 2426, 16127, 3551, 335, 240, -2099, 369, 4371, -130, 13369, 2203, 13232, -285, -87, 14284, 195, 10586, 4528, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00057884486159309745, 0.00049023359315469861, 0.00033099920256063342, 0.00031702176784165204, 0.00028228625888004899, 0.00030788738513365388, 0.00036303538945503533, 0.0013319082790985703, 0.00038839119952172041, 0.002586795249953866, 0.00065939431078732014, 0.0019556151237338781, 0.00017770711565390229, 1.9760937330914885e-09, 0.0010091493604704738, 0.00014207274944055825, 1.9760937330914885e-09, 0.006388896144926548, 0.00044475548202171922, 0.00032914220355451107, 0.00030918529955670238, 0.0046926373615860939, 0.00035825787927024066, 0.0016364111797884107, 0.00095518119633197784, 0.00064552488038316369, 0.0022780273575335741, 0.0023866861592978239, 0.00027479638811200857, 0.0017080494435504079, 0.0012036494445055723, 0.00014586148608941585, 0.00020700840104836971, 0.0096699101850390434, 0.00047491761506535113, 0.00057718052994459867, 0.0040694824419915676, 0.0003018334973603487, 0.0026850518770515919, 0.00025939539773389697, 0.0012716759229078889, 0.0001684753515291959, 0.00044693445670418441, 0.0090002883225679398, 0.00035387935349717736, 0.00049098144518211484, 0.00026367951068095863, 0.00019767809135373682, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ -42,-22,-8,-16,7,-38,-79,-69,-26,-51,10,68,34,-71,114,-44,-113,-84,37,-6,-2,-73,-112,-78,-34,-125,-64,-22,71,15,96,26,-127,-88,-7,55,20,47,-127,79,-78,-14,104,-108,-4,-36,-87,108, 76,13,-27,-28,58,-127,-127,-81,61,-76,-117,112,37,-82,0,62,-52,-113,58,7,9,-111,-127,-69,-5,-127,-119,-40,-55,22,-56,54,28,-127,65,84,14,70,-92,127,-127,6,123,-127,1,-24,-127,95, -31,43,7,-4,-64,-107,-59,-18,86,-9,-127,40,8,-71,-99,-11,-127,-25,27,12,-15,-81,-36,-24,-11,-32,-60,-13,-12,18,-23,8,106,-86,71,33,16,34,-6,16,-79,3,6,-78,-17,5,-55,15, 
  /* [0][1][][] */ -85,-127,-45,-44,-11,55,99,-106,-25,-109,-19,113,91,-64,26,-98,-121,-96,90,-76,42,-89,-102,-127,43,-119,-78,-40,127,-60,127,84,-43,-82,-15,85,-35,-77,-110,90,42,58,104,-111,-91,-117,81,120, 127,-82,-127,-127,127,40,92,-127,103,-127,-111,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-119,-117,127,-99,-127,-127,-119,-127,-70,127,29,-111,127,127,-69,-127,-99,90,60,127,127,-117,-112,-127,125,127, -53,30,-62,-84,-121,-22,30,-38,127,-21,-78,35,56,-70,-25,-44,-37,-33,54,-71,58,-83,-38,-24,49,-5,-45,-58,16,-88,-35,19,31,-100,118,24,-37,-63,-2,-15,37,53,11,-74,-57,-37,65,36, 
  /* [0][2][][] */ -60,-106,-35,-31,-1,35,-5,-34,-37,-58,-14,57,75,-127,-127,-65,-43,-18,65,76,50,-33,-12,-60,31,-59,-12,-59,74,28,76,63,107,-24,-39,-10,-94,35,-18,30,10,38,15,-58,94,-77,4,31, 88,-72,-89,-83,81,18,6,-46,48,-71,-32,54,81,-26,16,92,-24,-30,77,119,78,-55,-18,-57,91,-73,-20,-97,-51,39,-44,112,-18,-46,65,6,-127,50,-15,-2,11,33,16,-66,127,-100,-12,41, -28,27,-43,-34,-81,-19,21,-12,59,-6,-12,31,30,-43,112,-30,-93,-4,30,60,73,-30,-1,-3,41,-1,-6,-61,-14,28,-20,39,-91,-44,68,4,-19,21,26,-40,7,36,-5,-13,63,-35,-4,18, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0036642351187765598, 0.0027771936729550362, 0.006394227035343647, 0.0042793154716491699, 0.006238600704818964, 0.0078931106254458427, 0.0056232516653835773, 0.0025520897470414639, 0.0032754570711404085, 0.0013584429398179054, 0.0035807229578495026, 0.0010367067297920585, 0.0077301939018070698, 0.23551659286022186, 0.0027422669809311628, 0.01009738352149725, 0.1168077290058136, 0.00084786990191787481, 0.0048446147702634335, 0.0065268608741462231, 0.0045212474651634693, 0.0057943938300013542, 0.0050409953109920025, 0.0015413002111017704, 0.0039244401268661022, 0.0039908643811941147, 0.0014296536101028323, 0.0018226653337478638, 0.013760218396782875, 0.002080447506159544, 0.001883987570181489, 0.0097904233261942863, 0.008169613778591156, 0.00044167842133902013, 0.0038297912105917931, 0.0089208781719207764, 0.00059303472517058253, 0.01829928532242775, 0.0013865485088899732, 0.0038183827418833971, 0.0025357974227517843, 0.010372746735811234, 0.0047830753028392792, 0.00041803682688623667, 0.0066882316023111343, 0.0041788136586546898, 0.0083622122183442116, 0.0057719741016626358, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 68821, 61191, 63399, 42214, 468, 13348, 3136, 29584, 29083, 32691, 30411, 10756, -45812, -127, 40097, 1419, -204, 36151, 219, 1173, -14569, 9707, 50077, 36521, -19130, 30969, 44693, 23630, -2191, 16054, -8588, -50886, 12822, 102789, 26849, 1129, 60382, 167, 144051, -25599, 14681, -28631, 1656, 98282, -965, 61419, 1231, -22925, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 8.6217296484392136e-05, 6.5345731854904443e-05, 0.00015045239706523716, 0.00010068978008348495, 0.00014679061132483184, 0.00018572025874163955, 0.00013231180491857231, 6.0049173043807968e-05, 7.7069576946087182e-05, 3.1963365472620353e-05, 8.4252307715360075e-05, 2.4393100829911418e-05, 0.00018188692047260702, 0.005541567225009203, 6.4523926994297653e-05, 0.00023758549650665373, 0.0027484172023832798, 1.9949880879721604e-05, 0.00011399093637010083, 0.00015357320080511272, 0.00010638229286996648, 0.00013633868366014212, 0.00011861165694426745, 3.6265886592445895e-05, 9.2339767434168607e-05, 9.3902694061398506e-05, 3.3638909371802583e-05, 4.2886244045803323e-05, 0.00032376984017901123, 4.8951707867672667e-05, 4.4329121010378003e-05, 0.00023036290076561272, 0.00019222621631342918, 1.0392433978267945e-05, 9.011273505166173e-05, 0.00020990302436985075, 1.3953758752904832e-05, 0.00043057143921032548, 3.262466998421587e-05, 8.9844303147401661e-05, 5.9665824664989486e-05, 0.00024406463489867747, 0.00011254294804530218, 9.836160643317271e-06, 0.00015737015928607434, 9.8325028375256807e-05, 0.00019675794465001673, 0.0001358111621811986, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ -14,1,13,-88,7,28,4,10,1,9,0,-4,95,0,1,3,0,-2,-7,-3,79,2,0,9,30,39,15,11,7,3,0,-127,11,7,-4,0,-22,-1,-19,31,7,-26,-9,6,1,0,3,2, 
  /* [1][0][][] */ -37,-7,-4,-7,46,29,-33,81,23,5,-34,-25,9,0,20,40,0,46,21,-50,-5,28,127,23,-29,-4,56,-5,17,-2,19,-14,15,-5,-12,-18,6,-51,14,2,-8,-8,-91,-12,-38,7,-50,-100, 
  /* [2][0][][] */ -61,15,-1,10,46,-9,27,27,-16,59,12,-8,9,0,7,56,0,13,-127,22,5,20,9,-14,-31,1,41,8,4,28,27,10,0,-9,-13,-18,8,3,4,3,34,-10,-32,6,24,-58,26,16, 
  /* [3][0][][] */ 2,0,0,9,-8,24,2,-7,60,20,-9,-4,26,0,-30,-4,0,4,-12,2,-6,0,5,-18,-12,-1,-14,-6,-5,0,-2,-8,-46,46,-56,-3,8,2,10,-127,4,5,5,-48,0,-2,0,7, 
  /* [4][0][][] */ -1,0,80,34,4,-19,2,2,2,-7,-5,-6,-81,0,-13,7,0,16,7,1,63,6,0,-7,-15,34,-6,42,-7,-4,2,94,4,2,-2,1,22,-9,-8,-19,-2,-127,4,-1,0,-5,0,3, 
  /* [5][0][][] */ -7,41,3,-11,-4,45,27,14,-19,29,6,53,29,0,-127,-3,0,12,-39,20,-6,10,-12,42,-20,-1,29,0,-8,24,23,-17,50,32,-41,-3,0,17,-50,20,24,-13,-5,30,21,62,23,26, 
  /* [6][0][][] */ -23,-54,7,10,37,-40,-18,9,21,-25,-14,84,-4,0,-127,40,0,-11,47,-18,-2,1,26,-33,33,-1,1,-13,54,-14,-14,-4,93,-32,28,1,-4,-10,-75,-24,-18,-14,-3,-26,-24,-82,-20,-27, 
  /* [7][0][][] */ -114,-25,-8,8,127,23,67,27,8,11,25,-33,-23,0,85,100,0,16,3,59,-10,1,-29,44,20,10,48,7,50,59,56,-5,-13,-16,-19,-21,7,25,28,35,72,0,-30,-4,58,-1,63,78, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.059278018772602081, 0.027324838563799858, 0.059112720191478729, 0.048465937376022339, 0.044766087085008621, 0.047612939029932022, 0.035090319812297821, 0.034699484705924988, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { -4444, -25386, 25343, 21056, 3213, 372, 38611, 8617, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.0013947769766673446, 0.00064293737523257732, 0.0013908875407651067, 0.0011403750395402312, 0.0010533196618780494, 0.0011203044559806585, 0.0008256545988842845, 0.00081645848695188761, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ 86,28,-9,-14,127,36,-58,-29, 
  /* [1][0][][] */ -6,-4,8,127,12,-1,4,19, 
  /* [2][0][][] */ 24,-127,-22,38,-6,-60,80,16, 
  /* [3][0][][] */ 127,-27,-7,7,0,-31,24,4, 
  /* [4][0][][] */ 13,-50,127,-6,-14,-44,18,-105, 
  /* [5][0][][] */ 92,8,0,1,127,12,-5,7, 
  /* [6][0][][] */ -17,88,-31,127,19,51,-71,-60, 
  /* [7][0][][] */ -5,127,-5,2,-6,-11,12,-5, 
  /* [8][0][][] */ 127,42,-15,11,-40,-36,11,-20, 
  /* [9][0][][] */ -127,15,3,17,49,20,-18,-13, 
  /* [10][0][][] */ -72,4,18,127,44,28,-18,-18, 
  /* [11][0][][] */ -127,-11,20,-52,35,12,-39,-44, 
  /* [12][0][][] */ 127,32,2,2,-36,-11,-8,-49, 
  /* [13][0][][] */ -10,79,-127,-8,2,98,-61,72, 
  /* [14][0][][] */ -66,-23,-18,127,21,12,-13,-33, 
  /* [15][0][][] */ -7,127,0,-1,-1,-11,6,-50, 
  /* [16][0][][] */ -22,-121,-21,20,1,-99,127,-54, 
  /* [17][0][][] */ 13,127,6,-13,5,68,-83,-9, 
  /* [18][0][][] */ -7,35,-127,1,13,64,-24,57, 
  /* [19][0][][] */ -63,19,4,13,-127,17,8,11, 
  /* [20][0][][] */ -127,-40,-8,-3,91,-19,46,-9, 
  /* [21][0][][] */ -78,-15,-8,-7,-127,6,17,2, 
  /* [22][0][][] */ -127,-46,-5,0,100,-4,41,55, 
  /* [23][0][][] */ -16,-27,-10,-7,-8,83,-127,-83, 
  /* [24][0][][] */ -8,43,-127,2,15,50,-20,71, 
  /* [25][0][][] */ 104,-30,-4,127,-71,3,-3,-60, 
  /* [26][0][][] */ 6,-19,-6,-1,-11,115,127,-31, 
  /* [27][0][][] */ 73,7,-11,21,127,24,45,-17, 
  /* [28][0][][] */ 9,117,-66,9,15,95,-40,127, 
  /* [29][0][][] */ -19,16,-15,-15,-6,91,-127,-99, 
  /* [30][0][][] */ 3,1,-3,-127,-3,0,1,-17, 
  /* [31][0][][] */ -67,-4,3,-3,-127,11,6,4, 
  /* [32][0][][] */ 6,36,5,-127,-7,34,-81,-112, 
  /* [33][0][][] */ -56,-11,8,9,-127,43,47,-5, 
  /* [34][0][][] */ -127,52,-3,19,37,-21,2,5, 
  /* [35][0][][] */ -38,127,0,12,21,-70,67,-25, 
  /* [36][0][][] */ 3,40,0,-20,-13,80,-127,-22, 
  /* [37][0][][] */ 36,-89,-12,36,30,-127,120,-24, 
  /* [38][0][][] */ 10,-127,8,3,12,44,-44,79, 
  /* [39][0][][] */ 1,-127,-13,-12,-2,-13,-44,-89, 
  /* [40][0][][] */ 116,50,5,-21,-68,56,-127,-94, 
  /* [41][0][][] */ 9,-120,27,-4,3,89,-67,127, 
  /* [42][0][][] */ 48,-19,7,-127,-65,3,17,-33, 
  /* [43][0][][] */ -106,-13,21,-127,75,27,-31,-38, 
  /* [44][0][][] */ 21,-40,-5,5,-34,100,127,-13, 
  /* [45][0][][] */ -127,-30,-13,1,7,-2,28,-11, 
  /* [46][0][][] */ 13,71,127,-9,-1,17,8,27, 
  /* [47][0][][] */ 1,2,10,127,5,3,3,1, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.00016166438581421971, 0.00075537961674854159, 0.00061597052263095975, 0.0011652070097625256, 0.0033000258263200521, 0.0012654230231419206, 0.0024907833430916071, 0.0027831993065774441, 0.0016520351637154818, 0.0014859962975606322, 0.0016377947758883238, 0.0012246883707121015, 0.0013154363259673119, 0.0015032924711704254, 0.00137471710331738, 0.0043764724396169186, 0.00086733209900557995, 0.0010024816729128361, 0.004794600885361433, 0.00029991866904310882, 0.00065596867352724075, 0.0008568347548134625, 0.0010241242125630379, 0.0024265269748866558, 0.00081787101225927472, 0.00053500535432249308, 0.00039531555376015604, 0.00091260852059349418, 0.0022649934981018305, 0.0023896144703030586, 0.001318826456554234, 0.0010318636195734143, 0.0023886030539870262, 0.00061104277847334743, 0.00092985335504636168, 0.0006139639881439507, 0.0014137162361294031, 0.0007130302838049829, 0.00027829292230308056, 0.0058109578676521778, 0.0015554249985143542, 0.0024563481565564871, 0.0010369059164077044, 0.00089401961304247379, 0.00057244341587647796, 0.0012078158324584365, 0.0019672173075377941, 0.0024583791382610798, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 66137, 7377, 6232, 6864, 1658, 9770, -1881, -234, 843, 2282, 3410, 380, 1824, -755, 744, -2023, 4574, 10413, -266, 22058, 4465, 2915, 9531, -557, 3594, 5367, 25138, 9925, -73, -2705, 110, 1900, -2058, 8865, 2711, 7631, 6322, 4768, 20487, 1927, -941, 2755, 1073, 4247, 5209, 2210, -1422, 2672, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 6.564310024259612e-05, 0.00030671851709485054, 0.00025011206162162125, 0.00047312708920799196, 0.0013399607269093394, 0.0005138193373568356, 0.0010113713797181845, 0.00113010557834059, 0.000670801498927176, 0.00060338212642818689, 0.00066501926630735397, 0.00049727922305464745, 0.00053412705892696977, 0.0006104051717557013, 0.00055819773115217686, 0.0017770470585674047, 0.00035217631375417113, 0.00040705318679101765, 0.0019468262325972319, 0.00012178063479950652, 0.00026635313406586647, 0.0003479139122646302, 0.00041584105929359794, 0.00098528037779033184, 0.00033209286630153656, 0.00021723653480876237, 0.00016051610873546451, 0.00037056062137708068, 0.00091969047207385302, 0.00097029225435107946, 0.00053550355369225144, 0.00041898360359482467, 0.00096988159930333495, 0.00024811117327772081, 0.00037756279925815761, 0.00024929732899181545, 0.00057403312530368567, 0.00028952275170013309, 0.00011299959442112595, 0.0023595134261995554, 0.00063157337717711926, 0.00099738920107483864, 0.00042103099985979497, 0.00036301265936344862, 0.0002324380911886692, 0.00049042823957279325, 0.00079877977259457111, 0.00099821388721466064, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ 5,-3,21,109,4,82,-1,28,16,8,9,8,-8,-8,-45,7,-1,8,-24,-114,-7,-23,127,-9,-3,7,-5,9,-5,5,16,99,20,29,39,-27,1,34,-1,4,18,-65,-7,-9,17,2,-6,-11, 127,10,15,-127,27,91,11,11,124,127,7,44,-50,-23,5,7,127,-56,-60,-57,-102,24,-109,14,18,71,-31,-85,23,21,10,-122,5,-61,127,10,-40,-46,-5,120,-78,-97,-30,3,-33,-8,-127,23, -31,-3,8,15,-1,66,4,17,29,9,-15,32,-14,-2,16,3,-103,28,-3,78,-33,-13,-18,-7,-4,-58,-3,29,-16,6,4,-21,7,-23,17,-19,-1,48,41,-10,50,39,-16,12,-42,3,-2,-6, 
  /* [0][1][][] */ 125,7,1,-97,14,-28,34,-17,9,9,-13,54,-7,0,18,-34,0,-50,-61,-85,9,-75,-123,-18,5,98,-15,-127,-8,32,13,-106,17,-52,-3,127,-3,58,-40,43,-61,-127,39,-90,-43,-15,-12,-5, 26,-127,-127,114,-127,-127,-127,-127,-127,-95,127,-127,127,127,36,-127,-82,127,127,-106,127,127,111,127,127,-127,-127,29,-127,-127,93,127,-127,127,-30,-41,127,-127,127,127,127,-79,127,127,127,-121,102,106, 54,5,49,-13,5,-62,43,18,-23,15,-107,-7,0,-40,127,4,63,-66,-69,87,12,-46,11,-33,1,6,-38,69,20,40,1,4,31,-44,9,66,-5,65,67,-8,-80,10,-84,-31,28,-16,-10,5, 
  /* [0][2][][] */ -52,-7,26,-16,7,34,-37,22,7,-23,11,33,5,-6,-37,16,5,22,-14,107,5,-32,-15,-12,-3,23,0,53,-10,3,46,-31,-19,-43,-33,-39,0,31,10,-21,10,-5,41,-38,-37,18,-10,18, 69,125,76,21,17,-20,124,35,18,-2,42,27,-6,0,-89,23,-57,-56,-37,124,-38,49,12,20,31,-62,-39,31,76,1,127,22,84,-25,6,-35,-24,-17,-11,121,-26,-12,-41,44,20,-31,8,-127, -41,-4,7,-3,5,-6,-62,7,-19,-10,-42,-39,18,-9,-9,10,33,24,-8,-127,22,-10,5,-9,-7,11,-10,-54,-15,8,6,8,-21,87,-37,-22,-4,37,26,-60,5,10,-37,7,-42,127,-5,-3, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.012905880808830261, 0.011927126906812191, 0.0077393734827637672, 0.0099731413647532463, 0.0050249584019184113, 0.0041950736194849014, 0.024124853312969208, 0.0055804424919188023, 0.0045609408989548683, 0.0064066201448440552, 0.0032503227703273296, 0.007657540962100029, 0.0096738804131746292, 0.0080180587247014046, 0.0040107523091137409, 0.0077818096615374088, 0.0076186233200132847, 0.0084623591974377632, 0.0025783840101212263, 0.0063582411967217922, 0.0082617457956075668, 0.0078663676977157593, 0.0064731156453490257, 0.0056050587445497513, 0.0069606569595634937, 0.0051351548172533512, 0.025765053927898407, 0.0039304415695369244, 0.0071901637129485607, 0.029244786128401756, 0.0043131369166076183, 0.0073290830478072166, 0.031210474669933319, 0.0067493710666894913, 0.0083736460655927658, 0.0067493156529963017, 0.014094018377363682, 0.0060295122675597668, 0.010970607399940491, 0.00083014025585725904, 0.0043363790027797222, 0.0023165850434452295, 0.0055063311010599136, 0.0060823219828307629, 0.0066759367473423481, 0.0047665853053331375, 0.0093412240967154503, 0.0042120371945202351, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { -53156, -50, 8787, -435, 6057, -5500, 2057, 26456, 2715, 31357, -1487, 23718, -7051, -1067, 26158, 8777, 143, 19791, 39433, 10618, 480, -303, 96, 15970, -8205, 29661, 45468, 35591, 3857, 1146, -1195, 728, 1247, 18249, -6682, 15185, -11276, 17386, -22732, 132012, 31112, 19834, 12277, -1839, 14756, 2948, 1541, 119, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0003036677953787148, 0.0002806382835842669, 0.00018210291455034167, 0.00023466214770451188, 0.00011823431850643829, 9.8707620054483414e-05, 0.00056764361215755343, 0.00013130453589837998, 0.0001073162566171959, 0.00015074400289449841, 7.6478187111206353e-05, 0.00018017743423115462, 0.00022762072330806404, 0.00018866021127905697, 9.4370647275354713e-05, 0.00018310140876565129, 0.00017926172586157918, 0.00019911433628294617, 6.0667858633678406e-05, 0.00014960567932575941, 0.00019439402967691422, 0.00018509100482333452, 0.00015230861026793718, 0.00013188373122829944, 0.00016378016152884811, 0.00012082717148587108, 0.00060623657191172242, 9.2480979219544679e-05, 0.00016918031906243414, 0.00068811263190582395, 0.00010148557339562103, 0.00017244901391677558, 0.00073436414822936058, 0.00015880873252172023, 0.00019702696590684354, 0.00015880743740126491, 0.00033162397448904812, 0.00014187088527251035, 0.00025813194224610925, 1.9532712030922994e-05, 0.00010203244892181829, 5.4507883760379627e-05, 0.0001295607362408191, 0.00014311345876194537, 0.00015708086721133441, 0.00011215495032956824, 0.00021979351004119962, 9.9106757261324674e-05, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ -40,-20,-39,8,-2,-32,-4,-8,-107,127,-48,101,97,10,71,-23,-6,-36,7,4,3,-10,-27,-21,25,-84,13,53,-18,11,4,-44,0,-80,116,25,5,-12,-2,-17,99,-2,45,-32,-22,22,-5,-19, 
  /* [1][0][][] */ 3,38,127,12,-5,-22,1,-69,27,-1,23,6,-18,8,-8,-118,5,-58,0,8,-27,44,16,-34,-14,-9,16,-9,7,-11,9,1,-6,17,19,23,-14,-33,67,-58,11,36,-16,17,-13,11,24,9, 
  /* [2][0][][] */ 7,-53,15,-47,29,30,-11,-25,2,5,-6,16,-11,61,5,-2,-42,127,-26,-26,-18,24,-41,-7,122,1,0,-8,-32,-10,3,-40,-10,-4,2,9,-9,-5,-18,6,14,-21,-21,-2,5,21,-27,-43, 
  /* [3][0][][] */ -9,-85,-2,5,4,-9,-8,4,-3,-10,21,24,6,-12,48,2,-17,-26,1,14,-9,16,-28,-1,4,49,-4,9,-3,1,127,-5,10,2,-6,-6,-37,-12,-7,12,-7,6,-12,28,-13,3,2,31, 
  /* [4][0][][] */ -103,8,-3,-6,4,-51,2,3,49,-38,24,-25,-38,-2,-7,-11,6,0,3,26,17,-27,16,3,-7,46,5,107,3,8,-8,-33,-2,-127,-28,9,-1,2,7,-2,-49,-6,-14,21,-52,0,11,2, 
  /* [5][0][][] */ -14,29,8,1,-47,9,-3,59,30,-14,4,-4,-14,-46,5,30,-1,-90,15,13,46,-40,-4,44,15,3,-74,-54,-32,-35,18,-10,-1,-65,0,-50,56,7,-43,16,19,-40,3,2,127,4,-51,-10, 
  /* [6][0][][] */ -20,-26,-17,-14,39,-29,0,-23,-11,-3,25,-25,-7,34,-2,-59,-1,9,1,-23,-37,51,-6,-75,-1,-4,-47,-65,13,43,-18,0,5,-63,-14,63,-59,-45,14,-60,-11,18,14,35,127,-36,31,16, 
  /* [7][0][][] */ 13,32,-83,23,-27,15,8,70,-7,2,66,-32,12,-29,-10,-3,-23,-127,43,-40,56,35,20,-56,18,-24,26,8,-24,30,-14,4,-2,33,-9,-31,-10,-58,-48,-70,-13,-30,41,64,-25,-29,-11,-2, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.020260894671082497, 0.031783204525709152, 0.065464742481708527, 0.0679449662566185, 0.029922354966402054, 0.024238090962171555, 0.032868809998035431, 0.04043792188167572, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { -34540, 24314, -14396, -10204, 20913, 4386, 31312, 42886, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 0.00047672694199718535, 0.00074784009484574199, 0.0015403468860313296, 0.0015987050719559193, 0.0007040554191917181, 0.00057030800962820649, 0.00077338377013802528, 0.00095148052787408233, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ -127,0,-5,64,-33,44,26,-24, 
  /* [1][0][][] */ 30,90,67,-2,13,-46,109,127, 
  /* [2][0][][] */ -25,1,11,-11,-127,-14,8,-11, 
  /* [3][0][][] */ 97,-15,-24,-127,-118,21,20,-20, 
  /* [4][0][][] */ -127,57,-10,-11,73,-16,38,15, 
  /* [5][0][][] */ -105,-32,13,-8,-127,8,-1,90, 
  /* [6][0][][] */ -11,-127,34,-12,11,1,-6,31, 
  /* [7][0][][] */ -64,-5,12,98,127,-40,-31,13, 
  /* [8][0][][] */ 66,4,7,-127,2,-10,-51,-38, 
  /* [9][0][][] */ 0,-127,0,1,-5,87,-51,87, 
  /* [10][0][][] */ -98,4,10,25,-127,75,51,-12, 
  /* [11][0][][] */ 122,18,46,9,-57,-46,-36,-127, 
  /* [12][0][][] */ 0,14,44,-16,5,-73,127,57, 
  /* [13][0][][] */ 70,-22,-17,-16,127,124,110,-29, 
  /* [14][0][][] */ 125,75,28,13,-127,-29,-28,-57, 
  /* [15][0][][] */ -18,-127,18,-15,13,1,-10,34, 
  /* [16][0][][] */ -41,-12,2,3,-127,-9,14,2, 
  /* [17][0][][] */ -37,82,-99,3,2,-127,88,-71, 
  /* [18][0][][] */ 127,-33,-47,9,-61,32,8,103, 
  /* [19][0][][] */ 127,-54,-16,-11,65,12,26,14, 
  /* [20][0][][] */ 113,23,-21,127,1,24,-9,-58, 
  /* [21][0][][] */ -7,55,-72,-5,-23,91,-127,-108, 
  /* [22][0][][] */ -127,24,33,0,-34,-6,-58,-16, 
  /* [23][0][][] */ -40,-55,-4,34,-127,62,83,-17, 
  /* [24][0][][] */ 127,4,7,-9,-91,-15,2,-11, 
  /* [25][0][][] */ 21,-16,0,-26,127,53,49,-32, 
  /* [26][0][][] */ 6,-79,11,-32,5,-127,76,-45, 
  /* [27][0][][] */ -17,-127,24,-12,-2,-52,28,-9, 
  /* [28][0][][] */ -126,44,-20,-19,-57,-31,127,97, 
  /* [29][0][][] */ -11,46,16,0,-6,46,-100,-127, 
  /* [30][0][][] */ 127,-51,2,10,-100,13,-46,-16, 
  /* [31][0][][] */ -12,-39,61,-47,16,-86,127,69, 
  /* [32][0][][] */ -77,35,12,0,-127,-91,-104,50, 
  /* [33][0][][] */ -30,10,2,22,-127,-61,-53,21, 
  /* [34][0][][] */ 12,-127,49,-8,-2,89,-77,58, 
  /* [35][0][][] */ -22,-48,-127,-12,-4,-75,48,-57, 
  /* [36][0][][] */ 8,127,61,4,-19,8,-24,-40, 
  /* [37][0][][] */ -127,29,21,-5,49,-33,-5,-93, 
  /* [38][0][][] */ -127,-15,-50,-11,38,24,35,121, 
  /* [39][0][][] */ 14,-36,64,3,32,-101,127,104, 
  /* [40][0][][] */ -27,-12,0,-51,-127,97,114,-31, 
  /* [41][0][][] */ -127,58,9,-52,-94,-92,-83,62, 
  /* [42][0][][] */ -43,-127,-94,-4,-14,61,-110,-78, 
  /* [43][0][][] */ -67,5,-14,-127,97,44,66,6, 
  /* [44][0][][] */ 127,-12,29,-94,23,-29,-16,47, 
  /* [45][0][][] */ -24,-127,-15,-15,-20,-70,74,9, 
  /* [46][0][][] */ 101,-2,-3,-22,127,-19,-30,7, 
  /* [47][0][][] */ 127,-10,4,103,-2,38,1,-35, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.00073939835419878364, 0.0014693874400109053, 0.00049373361980542541, 0.00050850689876824617, 0.00041312168468721211, 0.00050612713675945997, 0.00089624937390908599, 0.00039005425060167909, 0.00068548420676961541, 0.0013574733166024089, 0.001981895649805665, 0.00050867762183770537, 0.0007796185091137886, 0.0012881328584626317, 0.00022103352239355445, 0.00077081733616068959, 0.00052808981854468584, 0.00069113750942051411, 0.00039907218888401985, 0.00053109083091840148, 0.00070374028291553259, 0.00042114092502743006, 0.00067078479332849383, 0.0003165565722156316, 0.0005010608583688736, 0.00055943260667845607, 0.0035662062000483274, 0.00083884212654083967, 0.00037621470983140171, 0.00082276534521952271, 0.00044120431994087994, 0.00046019573346711695, 0.001346764387562871, 0.00049597962060943246, 0.0013383344048634171, 0.00086320837726816535, 0.0012469893554225564, 0.00067596603184938431, 0.00041231102659367025, 0.00065655639627948403, 0.00033637447631917894, 0.00046267471043393016, 0.00062696472741663456, 0.00048963568406179547, 0.0034642056562006474, 0.00076303136302158237, 0.0007005099905654788, 0.0022970868740230799, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { 604, 961, 2138, 396, 10027, 15438, 2361, -102, -799, -597, 962, 1104, 3057, 1100, 30740, 3084, 1785, -1056, -436, 3265, -1538, 11669, 10452, 9268, 6078, 315, 3703, 4224, 8674, -506, 11369, 4872, 582, -53, 5276, 4004, -2165, 210, -673, 5282, 592, -633, -780, -61, 1089, 3418, 563, 961, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00038839664193801582, 0.00077185069676488638, 0.00025935203302651644, 0.00026711224927566946, 0.00021700761863030493, 0.00026586221065372229, 0.00047078848001547158, 0.00020489057351369411, 0.00036007619928568602, 0.00071306363679468632, 0.0010410647373646498, 0.00026720194728113711, 0.00040952378185465932, 0.00067663996014744043, 0.00011610612273216248, 0.00040490063838660717, 0.00027739891083911061, 0.00036304580862633884, 0.00020962758571840823, 0.00027897531981579959, 0.00036966588231734931, 0.0002212200197391212, 0.00035235480754636228, 0.00016628317825961858, 0.00026320095639675856, 0.00029386288952082396, 0.0018732831813395023, 0.000440633186371997, 0.00019762084411922842, 0.00043218827340751886, 0.00023175906972028315, 0.00024173501878976822, 0.000707438332028687, 0.00026053184410557151, 0.00070301018422469497, 0.00045343246893025935, 0.00065502780489623547, 0.00035507642314769328, 0.00021658178593497723, 0.00034488079836592078, 0.00017669326916802675, 0.00024303719692397863, 0.00032933667534962296, 0.0002571994555182755, 0.0018197034951299429, 0.00040081076440401375, 0.00036796907079406083, 0.0012066307244822383, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ 69,-94,97,70,55,-35,106,-65,59,-91,-81,47,53,-40,-72,-88,102,81,48,80,69,-74,-83,50,-34,-39,-63,-65,-67,61,-63,-114,-14,42,69,65,-65,52,-49,-23,50,-72,58,63,-96,11,78,-36, 82,-99,127,86,-79,-70,-58,-84,95,-105,-64,74,80,-106,-97,93,-39,98,83,127,86,-116,53,71,-52,-76,-68,-80,57,78,-30,-127,-87,79,78,83,-82,81,-82,-14,76,-92,82,91,-75,-127,95,-99, 35,-45,70,38,19,-42,-50,-40,42,-32,3,35,32,-79,-56,0,-55,39,34,69,33,-54,31,25,-29,-44,-42,-24,33,28,90,-90,-83,45,35,35,-31,39,-37,-10,42,-39,34,43,-6,-8,37,-72, 
  /* [0][1][][] */ 93,-112,-40,95,58,-84,127,-87,85,-113,-74,83,83,-109,-12,-127,127,108,75,-40,83,109,-127,71,74,-78,-93,-99,-127,87,-71,-9,-89,71,107,98,-87,79,-81,86,84,-101,87,92,-89,109,93,-91, 127,-127,-65,127,-127,-127,-89,-127,127,-127,-127,127,127,-127,-21,98,-65,127,127,-53,127,127,69,127,127,-127,-127,-127,53,127,-29,16,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-10,127,-127, 64,-77,-35,67,39,-63,-48,-64,55,-42,-59,59,49,-53,-17,11,-63,52,57,-31,58,65,50,63,66,-66,-61,-45,38,54,127,14,-62,70,50,50,-50,61,-60,57,61,-58,55,62,-61,-66,58,-56, 
  /* [0][2][][] */ 46,-51,-46,51,29,-53,62,-42,42,-75,-4,40,56,-69,83,-78,72,51,33,-32,27,-10,-77,29,-23,-45,-53,-48,-74,32,-42,89,-76,38,50,43,-27,39,-42,-86,47,-53,44,47,-23,17,39,-76, 74,-71,-49,81,-55,-65,-72,-67,51,-79,-66,60,74,-48,127,32,-48,59,61,-45,57,-17,42,66,-48,-68,-83,-60,32,61,-23,117,-56,65,57,58,-49,63,-66,-103,70,-68,64,65,-87,51,63,-53, 43,-41,-28,46,32,-21,-17,-35,15,-27,-50,29,32,3,67,24,-37,21,28,-34,31,0,40,41,-24,-27,-51,-24,35,34,62,67,1,34,16,23,-23,32,-29,-53,28,-33,29,30,-63,9,33,-4, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0032664167229086161, 0.001633369131013751, 0.007073533721268177, 0.002109534339979291, 0.0054940562695264816, 0.0025303943548351526, 0.0056679924018681049, 0.0054801544174551964, 0.003355150343850255, 0.0018169684335589409, 0.0019612915348261595, 0.0042456923983991146, 0.0020010867156088352, 0.0016350370133295655, 0.0065232664346694946, 0.0075500831007957458, 0.0065688174217939377, 0.0027271287981420755, 0.0052475999109447002, 0.0068752020597457886, 0.0036345194093883038, 0.0073215598240494728, 0.0043937433511018753, 0.0053129252046346664, 0.0033180322498083115, 0.0046697948127985001, 0.0010234502842649817, 0.0027513678651303053, 0.0047220862470567226, 0.0039147641509771347, 0.004568479023873806, 0.0061859674751758575, 0.0020973295904695988, 0.0052552311681210995, 0.0011357499752193689, 0.0022557685151696205, 0.0051190480589866638, 0.0038987393490970135, 0.0055838995613157749, 0.0034585029352456331, 0.0046858517453074455, 0.0040698908269405365, 0.0029123302083462477, 0.0038509203586727381, 0.001392571022734046, 0.0062676174566149712, 0.0043856576085090637, 0.0014000898227095604, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { 2835, 42792, -1392, 46673, 3488, 132598, -3278, 45713, 2641, 33884, 24931, -238, -2232, 29518, -556, -2006, -602, -27, 1873, -1245, 122, -3526, -433, -18748, -5410, 41071, 126052, 105962, 2553, 4701, -2063, 1754, 25157, 266, 45824, 732, 49098, 1531, 45364, 2145, 1127, 60596, -578, 3188, 49137, -641, 1521, 50490, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 7.6856864325236529e-05, 3.843221566057764e-05, 0.00016643608978483826, 4.9636102630756795e-05, 0.00012927190982736647, 5.9538691857596859e-05, 0.00013336453412193805, 0.00012894481187686324, 7.8944714914541692e-05, 4.2752199078677222e-05, 4.6148037654347718e-05, 9.9898643384221941e-05, 4.7084395191632211e-05, 3.8471458537969738e-05, 0.00015348862507380545, 0.00017764902440831065, 0.00015456041728612036, 6.4167739765252918e-05, 0.00012347294250503182, 0.00016176946519408375, 8.5518106061499566e-05, 0.00017227200441993773, 0.00010338219726691023, 0.0001250100031029433, 7.8071345342323184e-05, 0.00010987752466462553, 2.4081184164970182e-05, 6.4738065702840686e-05, 0.00011110791092505679, 9.2112102720420808e-05, 0.00010749362263595685, 0.00014555218513123691, 4.9348931497661397e-05, 0.00012365249858703464, 2.6723530027084053e-05, 5.3076906624482945e-05, 0.0001204481886816211, 9.1735048044938594e-05, 0.00013138588110450655, 8.137654367601499e-05, 0.00011025533603969961, 9.5762137789279222e-05, 6.8525419919751585e-05, 9.0609893959481269e-05, 3.2766376534709707e-05, 0.00014747335808351636, 0.00010319194552721456, 3.2943291444098577e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[16*1*1*48] = { 
  /* [0][0][][] */ -11,5,-28,-2,16,-4,10,100,-62,17,41,-10,10,-13,-21,14,14,-12,-12,-9,70,-8,35,127,-29,81,-9,-13,15,-15,20,-29,-16,50,21,-35,22,48,15,-14,-110,-26,12,44,40,32,-118,-54, 
  /* [1][0][][] */ -31,-8,22,12,-35,9,6,53,-56,-39,8,-46,-24,-21,0,-5,-24,112,-6,23,1,7,-27,-15,30,-36,20,19,-23,-83,-32,26,-10,-3,36,-6,-2,-36,4,16,-17,-31,127,6,9,-2,17,-14, 
  /* [2][0][][] */ -24,-5,-13,-38,-2,-64,2,-19,2,13,15,26,14,15,-8,3,-5,-22,-28,-17,-3,-3,8,-127,-14,76,-13,7,-2,-17,-2,2,-10,47,13,-2,19,10,26,-1,-42,5,-17,-7,-1,-5,17,7, 
  /* [3][0][][] */ -2,33,9,-28,2,-1,6,-8,-13,-2,4,41,-127,7,-12,0,3,9,-18,-1,-26,4,3,17,-9,-11,-2,25,-6,17,8,22,6,2,15,21,-11,25,37,9,10,5,24,-29,8,-3,9,13, 
  /* [4][0][][] */ 27,-37,12,15,18,29,22,-18,-33,5,-13,-17,3,17,-9,14,19,-14,-74,8,-4,5,14,72,0,-25,3,48,9,-74,22,-2,8,-34,29,-127,13,30,8,11,-17,22,3,-31,-20,-21,12,2, 
  /* [5][0][][] */ 32,3,-13,60,8,-7,3,28,8,-4,44,9,4,51,3,-3,-23,25,33,0,14,8,0,-23,3,-52,-4,-22,1,-9,2,9,71,-127,1,35,-14,-12,14,14,-90,52,21,-2,1,-3,-99,-9, 
  /* [6][0][][] */ 23,1,6,4,-15,-2,4,-12,-2,7,1,6,-20,9,4,3,-3,-16,127,10,2,8,8,-37,6,0,29,-11,-13,0,-2,11,3,-13,30,-40,0,-40,73,18,-2,-6,-2,6,-8,1,8,-8, 
  /* [7][0][][] */ -47,-12,-12,32,-10,81,-13,47,0,32,-4,127,78,-7,0,-4,1,-14,-11,-18,-39,-8,-20,63,3,-41,-46,-27,-8,-11,-11,-4,11,-3,-26,-1,5,-55,96,4,22,29,-62,-61,16,-13,13,5, 
  /* [8][0][][] */ -45,-51,-3,8,-4,-3,3,32,-3,-78,2,40,54,-1,15,7,-12,64,-24,10,-52,34,-11,-6,4,-5,1,42,-10,117,-12,13,0,14,-19,-127,-120,73,29,28,29,-16,112,-15,13,23,20,33, 
  /* [9][0][][] */ -26,7,4,25,15,-37,-2,-5,51,-41,3,57,-59,4,14,-3,-13,12,-39,-23,52,4,-16,-18,2,14,51,-29,11,12,14,0,-13,16,83,-110,-3,-127,-96,7,-37,30,62,7,-2,8,-28,-49, 
  /* [10][0][][] */ -22,-12,-31,-127,44,89,10,-4,-8,32,26,6,48,-54,-30,22,34,-37,51,-28,25,-27,35,46,-47,-110,6,-28,52,29,42,-34,-15,-80,19,-13,10,-39,10,-32,-34,-61,-14,13,19,14,18,-33, 
  /* [11][0][][] */ 6,67,-20,68,37,-71,-87,-31,5,69,-13,-13,-12,63,0,-89,31,57,-1,-1,-73,-101,6,-5,20,-55,26,-17,53,-47,28,-101,78,-29,-40,-107,110,28,0,-127,-7,74,109,-71,-3,-73,46,44, 
  /* [12][0][][] */ 127,1,-21,14,0,19,5,94,18,-14,-62,-25,-9,10,-5,-3,-3,1,-7,-3,5,3,5,21,-5,3,6,10,-5,13,-4,-10,2,-64,-2,8,-17,-17,-33,0,-8,-71,6,-110,-55,-3,73,-6, 
  /* [13][0][][] */ 11,1,0,5,6,-12,4,1,1,8,4,21,-2,2,6,3,4,3,9,1,12,-14,8,-2,4,0,14,127,12,-8,4,0,5,2,-42,21,9,-4,5,-17,-11,-9,1,7,0,-3,-10,-13, 
  /* [14][0][][] */ 67,-31,36,-69,58,25,39,-98,-57,-56,-13,125,-67,-8,74,24,47,20,-56,73,21,5,68,-13,25,65,-37,-121,27,-40,64,50,-13,73,-127,-49,-35,42,89,-12,-35,8,54,1,-6,-7,5,-33, 
  /* [15][0][][] */ -9,-48,-56,-33,49,25,70,-53,-5,24,-14,-39,86,8,-96,63,64,60,66,-81,-95,-19,46,-15,-89,33,14,45,47,36,46,-42,19,52,79,127,-20,-97,-11,-39,90,51,103,-43,-3,-21,-4,73, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant24_scale = { 16, { 0.029968593269586563, 0.037135925143957138, 0.0409732386469841, 0.048219416290521622, 0.03685128316283226, 0.045310895889997482, 0.035811025649309158, 0.024805193766951561, 0.027046477422118187, 0.023122183978557587, 0.036167517304420471, 0.023242305964231491, 0.047110337764024734, 0.056979890912771225, 0.023439796641469002, 0.025124901905655861, } };
const TfArray<16, int> quant24_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[16] = { -35492, 2900, 1397, -7767, -2628, -8197, -11461, -40531, 8039, 25649, 32691, -7202, -1233, -20078, 39424, -34953, };
const TfArray<1, int> tensor_dimension25 = { 1, { 16 } };
const TfArray<16, float> quant25_scale = { 16, { 0.00070514337858185172, 0.0008737865136936307, 0.00096407620003446937, 0.0011345745297148824, 0.00086708902381360531, 0.0010661387350410223, 0.0008426124113611877, 0.00058365165023133159, 0.00063638773281127214, 0.00054405140690505505, 0.00085100042633712292, 0.00054687779629603028, 0.0011084785219281912, 0.0013407033402472734, 0.00055152463028207421, 0.00059117417549714446, } };
const TfArray<16, int> quant25_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[96*1*1*16] = { 
  /* [0][0][][] */ 22,-34,119,127,88,-19,24,-52,104,-15,-42,-69,30,75,-15,-88, 
  /* [1][0][][] */ -3,74,12,-1,90,12,24,29,48,49,5,127,-9,-17,62,-89, 
  /* [2][0][][] */ -15,-59,-2,-5,-76,77,-38,119,-53,-116,23,81,-31,-90,78,-127, 
  /* [3][0][][] */ 119,127,-15,17,-125,-14,-75,-23,-11,-11,85,-77,-45,90,-29,-19, 
  /* [4][0][][] */ -15,-47,41,29,-23,43,-25,58,-84,-43,-14,15,19,-127,36,30, 
  /* [5][0][][] */ 116,-35,-38,28,13,-100,-37,-4,-36,27,-127,-8,46,-12,17,39, 
  /* [6][0][][] */ -127,-63,-16,109,-62,2,-86,14,-111,-86,-100,-17,6,37,10,104, 
  /* [7][0][][] */ -25,18,-60,45,41,-127,-26,54,12,-44,6,-1,-19,34,-42,18, 
  /* [8][0][][] */ 34,-43,-5,-9,-11,35,-78,-63,-19,18,-93,-17,-127,-2,-3,20, 
  /* [9][0][][] */ 20,-51,59,127,-24,41,11,-63,102,-88,17,-23,-18,50,-87,16, 
  /* [10][0][][] */ -86,-62,-6,-49,127,33,26,64,120,-92,-97,55,97,-104,-126,41, 
  /* [11][0][][] */ 54,-1,-127,31,46,1,-28,35,-16,-28,-4,-12,13,21,-28,7, 
  /* [12][0][][] */ 109,-59,3,8,-7,-93,-71,-54,64,-26,-127,-59,-48,-23,3,87, 
  /* [13][0][][] */ 0,-58,25,-55,81,26,-88,-127,29,-64,33,20,0,3,6,-13, 
  /* [14][0][][] */ -70,29,-119,-24,62,-127,41,-71,45,44,-30,-98,41,106,23,24, 
  /* [15][0][][] */ 22,-12,62,37,23,-63,-36,-29,4,-59,-68,-4,-127,-88,0,54, 
  /* [16][0][][] */ -127,82,5,-2,11,104,54,76,-66,23,124,19,-33,2,15,-31, 
  /* [17][0][][] */ -1,-4,-57,-30,-14,21,8,72,-29,127,-31,37,10,81,75,-3, 
  /* [18][0][][] */ -19,116,-48,-3,43,18,72,-107,39,115,-66,78,-1,-40,18,-127, 
  /* [19][0][][] */ -2,-27,34,7,10,36,-15,8,15,-8,-31,-15,-127,8,-8,34, 
  /* [20][0][][] */ 106,-63,-9,-117,-48,38,44,-101,-98,42,-127,-59,14,-21,42,11, 
  /* [21][0][][] */ 65,30,127,59,-64,43,17,-17,-25,51,-40,-25,-13,49,27,-12, 
  /* [22][0][][] */ 11,33,-2,4,-4,-16,32,127,27,20,-10,39,8,23,62,12, 
  /* [23][0][][] */ -5,17,-82,16,9,-127,6,45,-2,-32,0,9,-72,-3,-8,35, 
  /* [24][0][][] */ 28,-49,-16,-73,50,-18,-45,-28,18,4,54,66,-47,95,127,43, 
  /* [25][0][][] */ -127,-87,-43,-1,-29,12,19,-18,-27,6,-86,3,28,60,15,54, 
  /* [26][0][][] */ 8,-8,34,9,-14,4,-22,73,-85,-49,-14,26,12,-127,39,-19, 
  /* [27][0][][] */ -86,48,-18,28,57,-15,12,27,37,-31,127,16,-14,18,-13,-25, 
  /* [28][0][][] */ -26,-2,18,31,-6,9,16,95,22,15,-14,4,-127,-18,-15,27, 
  /* [29][0][][] */ -20,71,38,-24,43,-14,32,-31,-127,41,-26,2,4,31,-93,6, 
  /* [30][0][][] */ -7,14,-127,-32,20,-37,17,18,-21,8,-29,-23,-49,-35,7,10, 
  /* [31][0][][] */ 124,-39,-118,40,43,-20,-49,28,-9,7,-127,-36,30,-21,-53,37, 
  /* [32][0][][] */ -109,65,-1,23,15,74,25,33,26,-3,127,-16,-89,18,-11,-42, 
  /* [33][0][][] */ -8,-9,127,-32,-96,32,12,-72,-19,25,-18,34,13,1,43,26, 
  /* [34][0][][] */ -19,-62,-38,-124,14,-3,-28,-17,-6,-127,-62,-104,11,43,32,63, 
  /* [35][0][][] */ 1,-50,49,49,60,-17,13,-20,-109,25,3,32,-21,127,-36,-34, 
  /* [36][0][][] */ -91,43,-33,1,-34,49,51,113,7,29,127,-6,2,24,7,-30, 
  /* [37][0][][] */ -36,28,127,-9,-76,-50,48,-49,21,35,-16,23,-1,-74,90,8, 
  /* [38][0][][] */ 14,-2,-27,43,11,-44,-55,22,-25,-19,56,4,127,28,-3,2, 
  /* [39][0][][] */ -36,-17,-18,-64,-79,-109,38,74,-8,7,-36,-69,-2,44,71,127, 
  /* [40][0][][] */ 78,-23,-19,-15,12,46,-25,-5,12,-29,32,-9,127,13,-33,-17, 
  /* [41][0][][] */ 3,-27,-49,-127,17,-12,-60,-78,-2,-54,10,-41,-16,-1,-27,33, 
  /* [42][0][][] */ 48,52,34,105,-109,-8,-127,-21,-68,-75,55,-76,-58,120,-36,-4, 
  /* [43][0][][] */ 26,92,-27,127,14,16,35,-51,-40,81,15,31,38,-20,47,34, 
  /* [44][0][][] */ 6,-4,-127,25,63,64,-34,47,-27,-10,36,-25,-5,-43,-63,-17, 
  /* [45][0][][] */ 3,16,-34,-127,-19,24,62,10,-7,15,-26,34,46,-91,17,-48, 
  /* [46][0][][] */ -3,48,76,-13,14,32,-38,60,13,-40,-31,20,2,127,58,-34, 
  /* [47][0][][] */ 9,-25,32,-67,-38,32,-75,62,-22,-34,26,36,2,-127,55,18, 
  /* [48][0][][] */ 10,9,7,-127,2,-12,9,10,7,-11,11,-12,15,19,-7,56, 
  /* [49][0][][] */ 30,-33,9,127,92,18,14,53,-56,20,42,53,-10,46,103,-21, 
  /* [50][0][][] */ -12,-13,42,-18,18,124,-11,-64,37,-15,127,27,83,-10,-12,-47, 
  /* [51][0][][] */ 25,35,7,7,29,7,-42,23,47,-3,8,127,4,31,25,-39, 
  /* [52][0][][] */ -16,48,102,-18,11,-56,3,-44,-30,2,0,31,15,78,-127,5, 
  /* [53][0][][] */ -2,-27,-34,-127,-63,-14,28,-32,-32,43,3,-4,33,-25,28,2, 
  /* [54][0][][] */ -22,29,-19,-67,21,14,-12,1,48,-32,12,-25,-24,127,-9,32, 
  /* [55][0][][] */ -15,-4,-53,8,6,-51,-19,-127,20,-88,-24,17,-26,-71,-50,-24, 
  /* [56][0][][] */ 26,43,39,43,22,-17,16,127,24,-34,20,-37,75,-6,-65,40, 
  /* [57][0][][] */ 83,-14,127,-23,-83,-40,-12,-32,2,9,-66,0,36,-22,43,23, 
  /* [58][0][][] */ 86,102,23,95,-125,-42,-3,32,-20,16,127,-36,-88,-65,-27,-88, 
  /* [59][0][][] */ 127,-1,-8,4,-28,6,-2,7,-22,30,-85,-12,-3,-13,12,15, 
  /* [60][0][][] */ -127,38,7,4,6,31,35,26,-6,36,97,12,-54,-1,27,-28, 
  /* [61][0][][] */ -127,27,95,17,105,-12,-78,-65,127,-113,74,-7,54,-32,-85,-86, 
  /* [62][0][][] */ -37,-31,-127,32,54,73,-19,87,12,-70,16,2,-101,-4,-93,21, 
  /* [63][0][][] */ -24,3,127,-21,-52,-43,27,-35,15,28,-7,13,-32,-36,72,13, 
  /* [64][0][][] */ 10,62,-11,45,10,-7,49,-127,-12,63,-17,-3,-30,-83,16,20, 
  /* [65][0][][] */ 6,19,1,-25,74,15,4,-127,-30,-55,-22,-50,-4,-41,41,18, 
  /* [66][0][][] */ -127,-18,-10,4,-34,25,20,-25,-76,-39,-76,47,63,22,37,70, 
  /* [67][0][][] */ 7,-61,17,127,17,0,-24,60,79,17,20,-30,-22,-43,-94,-12, 
  /* [68][0][][] */ 9,-20,-24,127,-18,-13,19,-27,-63,49,-4,-36,-6,-80,-23,-31, 
  /* [69][0][][] */ 70,96,15,101,35,5,62,-127,20,113,48,35,-29,-39,27,-16, 
  /* [70][0][][] */ -26,-6,6,-96,82,-9,47,21,64,-39,86,-19,16,87,18,127, 
  /* [71][0][][] */ -12,56,0,84,48,-127,-54,81,35,-97,18,19,15,-52,-50,38, 
  /* [72][0][][] */ -127,-72,-7,34,16,40,-57,25,-28,-41,-92,12,26,28,6,89, 
  /* [73][0][][] */ -16,46,-57,107,-3,-44,3,-32,71,45,-44,30,56,127,-101,-50, 
  /* [74][0][][] */ 62,-76,33,-7,-62,2,60,-19,-56,-19,-127,35,-103,-3,41,59, 
  /* [75][0][][] */ -25,-20,-26,127,-25,1,-15,-47,-69,15,-16,-34,-2,-46,-17,-33, 
  /* [76][0][][] */ -3,-15,-6,16,19,23,-27,-124,2,-127,1,17,-57,-24,34,-24, 
  /* [77][0][][] */ 127,-17,22,70,-41,-3,-29,-10,59,-22,-47,48,20,14,-76,45, 
  /* [78][0][][] */ -10,-15,63,-7,37,-3,-81,-2,67,-38,-39,-54,1,127,52,-31, 
  /* [79][0][][] */ 1,29,30,13,36,56,-55,-68,8,-43,45,-18,127,-33,-25,-30, 
  /* [80][0][][] */ -110,-104,-37,127,42,42,29,-11,-96,53,-123,-6,55,-44,-33,20, 
  /* [81][0][][] */ 68,-10,-46,29,127,87,-15,-24,23,-101,2,-75,-44,-3,-100,10, 
  /* [82][0][][] */ 102,82,27,32,-127,-20,-104,-13,-32,-30,89,-80,-50,115,5,-22, 
  /* [83][0][][] */ 127,56,15,-24,8,-7,-9,23,23,26,78,-42,-56,-42,-22,-90, 
  /* [84][0][][] */ 40,-56,-69,-33,39,17,-18,-127,-32,-57,29,-12,-22,8,23,-14, 
  /* [85][0][][] */ -28,23,-27,-36,-2,6,69,66,0,127,2,-34,24,49,62,-35, 
  /* [86][0][][] */ 96,-41,21,10,-20,-12,-7,-21,-15,17,-127,26,40,23,-6,51, 
  /* [87][0][][] */ -6,24,9,-14,-22,38,-33,47,-6,-22,16,18,36,-127,2,19, 
  /* [88][0][][] */ -34,-64,-127,-31,69,-14,-41,-119,6,-85,-20,-25,-31,45,15,-7, 
  /* [89][0][][] */ 34,-10,10,-127,29,-2,-56,122,91,-81,24,-7,9,42,44,63, 
  /* [90][0][][] */ -32,21,-21,37,80,4,106,-113,35,127,-30,36,30,-13,-6,-3, 
  /* [91][0][][] */ 43,-26,-18,1,18,-127,-11,11,17,-13,-37,8,27,-1,6,13, 
  /* [92][0][][] */ -12,32,111,58,54,27,17,30,-51,59,-127,22,33,69,54,-9, 
  /* [93][0][][] */ 127,-43,-45,-25,-30,-71,-5,43,-29,28,-107,-8,-13,31,4,71, 
  /* [94][0][][] */ 40,-43,27,73,76,-25,-8,71,-15,12,-30,67,0,127,-6,-55, 
  /* [95][0][][] */ -102,40,32,49,25,43,23,14,35,14,127,5,-12,42,-35,-41, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant26_scale = { 96, { 0.00048802237142808735, 0.00094902841374278069, 0.0005346359102986753, 0.0024480440188199282, 0.0010221634292975068, 0.00049494567792862654, 0.00059188524028286338, 0.0018358613597229123, 0.0010124474065378308, 0.00039276867755688727, 0.00061625259695574641, 0.0015689498977735639, 0.00094942463329061866, 0.00047064945101737976, 0.00076142942998558283, 0.00092861818848177791, 0.00059966422850266099, 0.00085314968600869179, 0.00067173701245337725, 0.0019877625163644552, 0.00087667990010231733, 0.00065879273461177945, 0.0013026613742113113, 0.00092892814427614212, 0.00054040533723309636, 0.001341315102763474, 0.0010397571604698896, 0.00057603215100243688, 0.0017139511182904243, 0.0012205981183797121, 0.00077486562076956034, 0.00053813407430425286, 0.00036841613473370671, 0.0016305384924635291, 0.00054950395133346319, 0.001562722260132432, 0.00034244477865286171, 0.00094512832583859563, 0.0020035239867866039, 0.00062157015781849623, 0.0020810544956475496, 0.00043922220356762409, 0.00054242514306679368, 0.000533508718945086, 0.0010068203555420041, 0.0011454117484390736, 0.00066832912852987647, 0.00070452765794470906, 0.0011208540527150035, 0.00073808646993711591, 0.0015631292480975389, 0.0036201062612235546, 0.00055769219761714339, 0.00087530637392774224, 0.00082133966498076916, 0.00040659375372342765, 0.0013562443200498819, 0.00073506950866430998, 0.00079300394281744957, 0.0014989436604082584, 0.0003819382400251925, 0.00051279965555295348, 0.001258328091353178, 0.0014102968852967024, 0.00064752105390653014, 0.00086910941172391176, 0.0010457728058099747, 0.0011919144308194518, 0.00039909483166411519, 0.00047240423737093806, 0.00061717850621789694, 0.0013212183257564902, 0.00081989169120788574, 0.0011981370626017451, 0.00078472297172993422, 0.0011162539012730122, 0.00035867799306288362, 0.0011118408292531967, 0.00037440552841871977, 0.0018947762437164783, 0.00058423541486263275, 0.0014804990496486425, 0.00050674163503572345, 0.0013003463391214609, 0.0007599325617775321, 0.0010995246702805161, 0.00079343706602230668, 0.0011189903598278761, 0.00050494982860982418, 0.001013857196085155, 0.00059802341274917126, 0.0015167336678132415, 0.00056453491561114788, 0.0004270003701094538, 0.0011063896818086505, 0.00060710677644237876, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[96] = { 20589, 1129, 9784, -903, 5841, 7154, 20175, 7326, -1620, 17639, 9041, 1889, 10942, 38979, -839, -3030, 14203, 9948, 2422, -211, -1255, 14297, 4221, 3089, 12752, 5934, 5194, 6035, 82, 28, 7260, 13328, 20661, 2504, 11432, -689, 25304, 10614, 780, 5938, 955, 16469, 15272, 5433, 4326, 10756, 16217, 8032, 5329, 4737, 414, -701, 18400, 7061, 10747, 17714, -316, 9118, 3721, 4065, 16600, 10068, 3189, 7431, 6103, 5057, 7155, -1151, 25707, 9409, 12523, -1454, -2093, 4054, 1893, 4451, 24976, 15501, 16820, -2493, 6817, -5315, -3330, 852, 7926, 5289, 7417, 4648, 12455, 5985, 8619, 4258, 14170, 24386, -10062, 20934, };
const TfArray<1, int> tensor_dimension27 = { 1, { 96 } };
const TfArray<96, float> quant27_scale = { 96, { 0.000127773018903099, 0.0002484726719558239, 0.00013997728819958866, 0.00064094190020114183, 0.00026762075140140951, 0.00012958566367160529, 0.00015496618289034814, 0.00048066148883663118, 0.00026507690199650824, 0.00010283389565302059, 0.00016134600446093827, 0.0004107792628929019, 0.00024857642711140215, 0.00012322448310442269, 0.00019935589807573706, 0.00024312891764566302, 0.00015700286894571036, 0.00022336990514304489, 0.00017587281763553619, 0.00052043190225958824, 0.00022953054576646537, 0.00017248376389034092, 0.00034106013481505215, 0.00024321007367689162, 0.00014148782065603882, 0.00035118038067594171, 0.00027222710195928812, 0.00015081556921359152, 0.0004487432015594095, 0.00031957452301867306, 0.00020287373627070338, 0.00014089317119214684, 9.6457959443796426e-05, 0.00042690426926128566, 0.00014386999828275293, 0.00040914874989539385, 8.9658191427588463e-05, 0.0002474515640642494, 0.00052455859258770943, 0.00016273822984658182, 0.00054485746659338474, 0.00011499626270961016, 0.0001420166518073529, 0.00013968216080684215, 0.00026360366609878838, 0.00029988936148583889, 0.00017498056695330888, 0.00018445799651090056, 0.00029345971415750682, 0.00019324429740663618, 0.00040925532812252641, 0.00094780884683132172, 0.00014601383008994162, 0.00022917092428542674, 0.00021504148025996983, 0.00010645354632288218, 0.00035508911241777241, 0.0001924544048961252, 0.00020762268104590476, 0.00039245036896318197, 9.9998294899705797e-05, 0.00013426016084849834, 0.0003294528869446367, 0.00036924105370417237, 0.00016953263548202813, 0.00022754845849703997, 0.00027380211395211518, 0.00031206459971144795, 0.00010449019464431331, 0.00012368391617201269, 0.00016158842481672764, 0.00034591869916766882, 0.00021466237376444042, 0.00031369380303658545, 0.00020545456209219992, 0.00029225531034171581, 9.3908340204507113e-05, 0.00029109988827258348, 9.8026095656678081e-05, 0.00049608643166720867, 0.00015296333003789186, 0.00038762125768698752, 0.00013267406029626727, 0.00034045401844196022, 0.00019896400044672191, 0.00028787530027329922, 0.00020773606956936419, 0.00029297178843989968, 0.00013220493565313518, 0.00026544602587819099, 0.00015657326730433851, 0.00039710811688564718, 0.00014780537458136678, 0.00011179636931046844, 0.00028967269463464618, 0.00015895145770628005, } };
const TfArray<96, int> quant27_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*96] = { 
  /* [0][0][][] */ -17,6,-20,108,-15,24,-61,-53,23,-8,92,-6,3,-8,-3,58,6,17,-34,6,69,1,32,-34,2,17,46,49,20,12,23,49,-6,28,7,-15,4,48,-65,-26,21,8,29,18,-84,-56,24,-5,-10,-18,-7,-7,49,5,-11,2,-2,-34,28,-29,28,-3,127,27,-15,-10,10,-54,69,36,-2,-7,78,-33,70,3,17,-127,30,64,4,14,127,-15,36,27,-27,-18,34,-7,-14,83,1,18,-3,12, -48,11,-8,12,51,-7,-9,-127,42,11,-127,-4,-16,-12,6,99,17,-32,-14,-15,74,-98,127,25,-61,-31,-105,-17,26,34,-49,19,121,14,-9,-2,-24,127,-68,-127,10,-18,-26,15,47,-127,127,-44,-76,53,49,6,39,-64,32,56,39,43,-101,87,127,32,2,-21,42,-37,-101,-2,38,-30,-17,47,-44,-47,107,-5,-31,-57,-32,62,-64,64,-20,7,-12,47,54,-40,-26,53,-14,72,-127,-31,24,-127, 1,-5,-24,-73,8,23,39,20,-1,-4,3,64,-1,-12,-10,8,-13,19,-14,17,7,25,25,-33,1,-34,13,13,-5,5,45,-78,41,18,11,-22,10,4,-40,-20,7,3,-15,9,23,-29,20,1,7,-3,6,-5,4,5,-4,8,-7,44,7,-2,12,-20,3,-18,-27,-18,26,-52,-106,-8,38,-16,-127,-24,-10,15,12,-11,8,14,-13,25,-36,-1,-41,19,27,36,-25,-17,24,-10,17,5,-2,-48, 
  /* [0][1][][] */ -39,59,-18,40,-84,-15,-11,-42,31,96,-45,-22,-29,-25,-5,60,127,-25,-94,-14,57,-127,-30,15,-36,-49,-127,-4,39,35,-50,28,-127,-75,-59,4,63,-4,-51,45,-20,88,3,-1,34,-56,-13,-32,127,44,-4,19,44,9,-39,-17,31,12,-126,127,-38,-90,22,127,-63,-33,-84,125,-36,127,-22,55,-37,-57,36,7,-36,-72,127,47,127,36,5,0,127,27,-94,48,-39,-34,-104,39,97,98,27,-60, 127,127,127,127,-44,-127,127,24,127,-127,15,-127,-104,127,127,127,-16,-127,-60,-127,127,23,-69,127,127,127,-56,-127,127,127,-127,127,-11,-127,-115,127,-127,-46,93,108,-127,-127,127,127,127,-122,-109,127,-14,127,-127,-127,-127,127,127,-127,127,-127,-43,41,-108,-29,-71,-69,127,127,-66,127,127,-109,-127,127,-43,127,-127,-127,-127,124,-76,127,-40,127,79,127,-38,-127,-25,-106,-127,-127,-23,-127,-22,-127,-127,121, -23,63,-38,6,127,72,-20,47,6,23,-13,-5,-26,-29,-11,-6,-106,-22,-127,35,31,78,-13,-117,-34,-41,127,72,12,34,71,8,121,-49,127,-2,55,4,-100,15,34,24,-21,2,-24,-54,-14,-42,80,20,-12,38,-6,-4,-74,-14,23,21,127,-89,2,127,1,-37,-114,-27,-76,99,15,-18,113,27,-21,-57,13,44,-30,-9,-42,-3,-46,10,51,29,-88,34,127,-47,29,-22,127,-9,-111,32,33,18, 
  /* [0][2][][] */ -3,-36,-20,-59,-5,16,38,33,3,11,-20,56,25,-35,-5,5,40,-1,5,24,-10,30,-18,-26,0,-24,11,4,-9,-7,49,-76,-40,69,-31,-25,31,-35,-59,18,10,11,-32,19,11,-82,-12,-1,-9,8,17,-9,7,1,-23,6,-1,46,-50,36,-6,-12,5,17,-7,-10,24,-54,-56,12,-24,-7,-116,-33,-1,19,14,-12,59,14,22,19,-43,19,14,27,-21,11,3,27,22,-4,19,39,-8,-32, -27,-8,-27,26,-44,77,-26,64,5,-4,50,-8,127,-6,-16,-17,-3,-45,-65,25,-23,77,-46,-110,-47,-47,103,69,12,42,53,-2,-124,63,-7,-23,-28,-27,-127,-1,44,-11,-14,36,-28,-47,-18,-48,-60,25,67,23,-12,-79,32,53,16,26,73,-56,19,-58,-10,0,16,-26,-127,-57,-11,-28,-62,23,34,-44,-30,-7,-46,24,-56,-2,49,34,16,11,6,64,-96,127,14,127,-33,-16,110,-22,47,85, -9,-32,-25,29,12,62,-43,14,5,-5,1,17,13,-50,-8,-13,-44,-7,12,19,-24,4,-22,3,-5,19,-2,50,-2,-6,33,31,22,42,23,-22,-6,-27,-32,9,12,-12,21,9,-74,-32,-13,5,-2,-15,-2,-6,-9,9,-16,-5,-1,-49,12,-28,-22,51,9,-29,-11,-2,35,-56,47,7,53,-16,27,-55,-17,21,10,12,-4,22,-28,31,90,-13,-17,54,40,-10,105,12,2,-18,11,-22,-7,-50, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant28_scale = { 96, { 0.0079083098098635674, 0.0056925592944025993, 0.0092061674222350121, 0.0014199503930285573, 0.0061142272315919399, 0.0072435084730386734, 0.013587682507932186, 0.0032975410576909781, 0.0060234768316149712, 0.017499214038252831, 0.0067478246055543423, 0.014007252641022205, 0.0046359943225979805, 0.016457563266158104, 0.00839214026927948, 0.0063450210727751255, 0.0044198036193847656, 0.01218899991363287, 0.0029423767700791359, 0.010266966186463833, 0.0022028321400284767, 0.0074485316872596741, 0.0054907435551285744, 0.014503810554742813, 0.0098881376907229424, 0.0092264674603939056, 0.0055369744077324867, 0.0074348049238324165, 0.0051681520417332649, 0.0047772866673767567, 0.0047464338131248951, 0.0073770293965935707, 0.005400524940341711, 0.0053181289695203304, 0.0079962871968746185, 0.0069368816912174225, 0.018137387931346893, 0.004672046285122633, 0.0017144584562629461, 0.0065538273192942142, 0.0084867523983120918, 0.012350184842944145, 0.013650859706103802, 0.0064722057431936264, 0.0072182533331215382, 0.0024026620667427778, 0.0088472459465265274, 0.0087132686749100685, 0.0030505235772579908, 0.0070360326208174229, 0.0083854319527745247, 0.0058746444992721081, 0.0091384919360280037, 0.0096049709245562553, 0.0091880457475781441, 0.019774461165070534, 0.011037252843379974, 0.0087764281779527664, 0.0039793285541236401, 0.0033506953623145819, 0.013159972615540028, 0.0052307234145700932, 0.012132089585065842, 0.0051990053616464138, 0.0067303832620382309, 0.0075164800509810448, 0.0034982352517545223, 0.0025865528732538223, 0.013754225336015224, 0.0083138467743992805, 0.0078273843973875046, 0.0040693860501050949, 0.0051912395283579826, 0.0056653604842722416, 0.0071246111765503883, 0.0089801819995045662, 0.020282307639718056, 0.002168161328881979, 0.010589298792183399, 0.0083153145387768745, 0.0065596159547567368, 0.014599669724702835, 0.005634956993162632, 0.0067287604324519634, 0.0054376185871660709, 0.0036406661383807659, 0.0052798530086874962, 0.0074187903665006161, 0.0084049627184867859, 0.0041301562450826168, 0.0070093292742967606, 0.0047710868529975414, 0.005958115216344595, 0.018853016197681427, 0.075762070715427399, 0.0033260965719819069, } };
const TfArray<96, int> quant28_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[96] = { 9648, -8841, 2873, 64559, -2289, -4932, -10977, 1389, -3117, 1254, 3903, -2045, 1344, -7227, 4628, -5553, -541, 16778, 24367, 2353, 1251, -1974, 2203, -227, 15950, -1322, -1180, -3534, -5908, -7668, 8161, -9238, 899, -1437, -2027, 14221, 1934, -3324, 22053, 110, -238, 1541, -11254, -8149, -7813, 66739, 1035, 16368, 36778, -13483, 339, 9590, 7913, -457, -6563, 2394, -13837, 992, 1982, -6768, -685, -861, -11293, -805, 2202, 16138, 29951, 29865, -12660, 343, -9185, -1342, 47328, 9714, -313, 589, 18482, 32555, -841, -9297, -1920, -6189, 977, -3552, 983, 3394, 1017, -296, 2545, -3503, 343, -1448, 515, 799, 715, 48858, };
const TfArray<1, int> tensor_dimension29 = { 1, { 96 } };
const TfArray<96, float> quant29_scale = { 96, { 0.0001860778866102919, 0.00013394257985055447, 0.00021661570644937456, 3.3410597097827122e-05, 0.00014386417751666158, 0.00017043549451045692, 0.0003197101759724319, 7.7589204011019319e-05, 0.00014172887313179672, 0.00041174620855599642, 0.00015877235273364931, 0.00032958242809399962, 0.00010908221884164959, 0.00038723679608665407, 0.00019746212637983263, 0.00014929461758583784, 0.00010399537859484553, 0.00028680000104941428, 6.9232395617291331e-05, 0.0002415756753180176, 5.1831346354447305e-05, 0.00017525957082398236, 0.00012919396976940334, 0.00034126613172702491, 0.00023266207426786423, 0.00021709335851483047, 0.00013028175453655422, 0.00017493659106548876, 0.00012160358164692298, 0.00011240674939472228, 0.00011168079799972475, 0.00017357716569676995, 0.00012707118003163487, 0.00012513244291767478, 0.00018814794020727277, 0.000163220742251724, 0.00042676206794567406, 0.00010993050091201439, 4.0340200939681381e-05, 0.0001542077079648152, 0.00019968829292338341, 0.00029059257940389216, 0.00032119671232067049, 0.00015228718984872103, 0.00016984125250019133, 5.653322659782134e-05, 0.00020817050244659185, 0.00020501809194684029, 7.1777023549657315e-05, 0.00016555370530113578, 0.00019730428175535053, 0.00013822692562825978, 0.00021502334857359529, 0.00022599931980948895, 0.00021618932078126818, 0.00046528145321644843, 0.00025970008573494852, 0.00020650419173762202, 9.3631264462601393e-05, 7.8839890193194151e-05, 0.00030964642064645886, 0.00012307584984228015, 0.00028546093381009996, 0.00012232954031787813, 0.00015836195962037891, 0.00017685836064629257, 8.231141691794619e-05, 6.086006760597229e-05, 0.00032362883212044835, 0.00019561992667149752, 0.00018417375395074487, 9.5750263426452875e-05, 0.00012214681191835552, 0.00013330260117072612, 0.00016763791791163385, 0.00021129840752109885, 0.00047723078751005232, 5.1015562348766252e-05, 0.00024915998801589012, 0.00019565445836633444, 0.00015434391389135271, 0.00034352164948359132, 0.00013258722901809961, 0.00015832377539481968, 0.00012794397480320185, 8.5662737546954304e-05, 0.00012423183943610638, 0.00017455978377256542, 0.00019776383123826236, 9.718014916870743e-05, 0.00016492539725732058, 0.00011226086644455791, 0.00014019095397088677, 0.00044360038009472191, 0.0017826369730755687, 7.8261095040943474e-05, } };
const TfArray<96, int> quant29_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[16*1*1*96] = { 
  /* [0][0][][] */ -6,34,-12,36,40,71,-30,-23,47,11,6,3,-14,5,19,84,18,11,-12,4,100,-50,0,-5,-19,-32,-47,-81,2,-4,42,37,127,-6,5,0,17,-23,-18,-2,-29,7,41,-25,9,-30,-9,34,-25,27,3,-3,-42,-5,3,-13,47,29,-7,-34,-47,34,-5,-10,2,7,58,5,20,3,-13,-26,-70,-15,-16,-2,-4,-83,3,-8,69,0,-36,-48,17,-16,10,21,-13,-6,23,-34,39,22,-5,121, 
  /* [1][0][][] */ 68,-112,44,64,-7,-96,-6,-48,-29,-103,4,2,16,-62,-32,-70,-113,-19,23,22,-45,-127,-24,39,117,-40,-72,13,-25,97,-26,85,33,-3,-83,13,-9,2,77,-18,-15,-80,77,-28,-64,-11,64,-2,33,-1,10,-51,87,-70,43,-40,-10,15,-34,-124,47,-47,24,-68,-6,-80,47,18,43,46,-32,19,-122,36,-12,56,-3,94,20,-10,25,-14,-96,47,-104,90,-16,48,-82,35,31,1,-29,-59,37,-33, 
  /* [2][0][][] */ 14,21,2,-14,15,9,-6,43,73,-14,14,62,-14,-4,58,7,-16,-31,0,-7,-9,-61,-4,-66,-2,-27,-21,26,-9,5,120,-57,2,-72,-17,63,16,127,-62,-34,4,-19,9,34,-41,-37,-72,10,31,39,-36,-31,18,-3,-21,-46,-10,2,-5,27,-14,-10,76,84,-5,-72,12,-71,-6,0,-15,19,-30,-10,-4,22,19,33,6,22,21,100,40,-24,-16,29,15,10,7,24,2,-34,-38,12,18,66, 
  /* [3][0][][] */ -21,-22,-43,24,33,-15,2,-50,-8,12,13,-1,16,-9,73,-18,45,-59,5,11,-11,-3,0,-6,-7,9,4,-12,22,-40,57,-22,1,-6,-11,57,-17,-13,-3,12,-1,-81,13,-22,-10,-4,1,5,-127,53,-20,24,-112,-47,-38,-29,14,17,1,59,-17,11,22,-2,-8,-93,-47,21,46,9,-3,22,-42,9,11,-47,-51,-76,33,-32,27,-23,22,82,46,69,38,15,37,-18,2,5,-27,-2,-15,-30, 
  /* [4][0][][] */ -10,-40,12,-97,-14,-15,-52,14,-42,-46,-29,4,6,68,-11,-5,34,-12,35,13,-15,22,72,-2,-23,9,27,20,-1,-6,3,-14,-35,25,-7,0,40,-11,2,8,18,12,-120,-43,30,-14,-2,-14,18,82,-15,-7,-24,-17,18,0,-6,-36,7,40,24,11,5,-15,48,-127,16,-23,-60,3,-6,-24,7,24,-30,27,-14,78,61,-17,-26,-12,115,-57,32,-35,-26,-9,84,-14,-25,14,-57,20,-8,-51, 
  /* [5][0][][] */ -7,2,4,-1,6,-13,14,91,63,-11,-11,-49,-23,27,46,31,-13,-32,-8,-36,-32,-1,-1,-45,15,5,26,72,67,0,53,53,-54,21,11,-1,-50,-50,-30,-23,-55,-16,-1,-9,68,16,6,16,12,14,-11,4,-24,-9,-11,-8,-30,-9,-5,49,-62,20,-26,-46,2,13,-27,11,-4,33,1,6,18,9,29,3,-8,12,7,127,8,-28,40,38,13,16,34,-20,-2,-15,31,-108,-20,-8,-19,-113, 
  /* [6][0][][] */ -28,5,2,-55,11,-30,-2,5,1,16,-18,-27,40,-49,16,-9,-14,-81,27,2,-4,7,-20,26,85,-10,-5,-2,30,-12,2,-13,-21,-10,-29,9,19,0,29,40,-17,-39,-46,-23,-1,-17,26,-127,17,41,20,4,14,7,-3,-55,38,2,-17,10,14,21,7,10,37,82,36,-19,-21,2,9,-13,8,0,58,-13,-47,24,1,12,-32,-3,62,-24,9,55,34,-19,13,22,-18,-11,-27,16,-21,13, 
  /* [7][0][][] */ 19,13,40,-17,1,-1,1,-36,6,-14,-21,-17,-19,-93,45,19,9,-40,-22,-17,15,-14,-43,-5,-18,-4,8,-19,8,5,2,2,-15,-6,6,-22,2,-27,-42,20,12,-26,-14,27,-2,17,-8,72,-10,19,-22,-31,-26,9,1,-64,38,1,1,15,-12,12,-9,8,-24,43,14,-27,-5,16,2,57,-20,-20,-4,29,38,-5,-10,-8,18,-27,49,-7,-31,127,15,16,-43,-5,11,29,-13,5,6,7, 
  /* [8][0][][] */ -77,44,-38,10,45,-3,-3,29,32,98,-27,-8,23,22,87,-8,20,18,-75,29,42,44,-36,10,-49,-38,15,25,51,-84,-8,5,41,16,30,-3,-8,26,-53,41,3,2,5,-127,-30,-8,45,2,-54,24,22,68,-88,66,-10,11,-9,-27,-13,-18,29,-26,43,20,-10,25,25,-12,-4,3,23,76,-40,15,24,27,-9,-71,6,-31,13,-1,43,26,-38,8,39,-55,18,33,-21,-20,49,-37,-26,-36, 
  /* [9][0][][] */ 14,-62,-42,-41,0,14,-30,26,21,-31,5,10,-44,-21,-16,5,-44,-2,30,-16,-37,-5,-17,-42,20,15,23,-24,-34,-30,-20,-5,-29,13,-12,27,-8,47,-12,31,1,25,-25,-72,-9,-13,14,-127,-27,-3,0,28,-16,6,-8,-2,-38,11,-31,3,7,9,-6,10,20,97,37,30,1,-23,18,-26,0,4,-18,8,56,-13,22,4,-40,-24,-6,-33,-3,28,-24,0,-54,25,-39,0,-24,-5,-8,-12, 
  /* [10][0][][] */ 27,53,-14,33,72,-127,1,-40,12,53,31,-6,-11,27,33,-75,14,24,-27,33,-79,-11,4,-33,-70,-13,-52,44,13,4,-6,56,-15,-12,50,-9,80,-26,-23,-8,-23,65,42,-27,-54,-6,-31,14,-18,-15,-41,-11,-9,-5,-12,-10,-6,36,-31,5,-15,11,-24,30,16,50,60,33,48,15,32,58,-68,-21,-43,-15,-12,5,-19,7,42,12,-67,-44,70,-51,105,-13,-27,20,30,-11,99,55,-19,-127, 
  /* [11][0][][] */ 49,42,-23,16,3,14,54,-9,9,-12,-20,-29,-5,8,45,15,11,-9,-99,-14,11,33,-4,-5,-38,-20,-8,0,6,15,-6,-10,0,4,13,26,8,2,-1,9,-9,18,45,-96,33,-35,5,6,-127,15,10,-51,28,18,-24,18,-21,-12,24,12,17,-15,-3,3,-41,54,-12,21,18,0,19,12,-57,-26,19,19,-7,-28,-44,10,30,18,99,56,14,-10,5,-2,9,16,-5,-5,19,7,-29,13, 
  /* [12][0][][] */ -37,11,11,11,-21,52,8,0,127,21,-28,10,9,-7,-43,-30,41,39,0,79,49,40,-16,-9,11,3,12,-16,-91,9,34,-53,21,12,3,-17,9,-7,27,-18,-33,-18,1,20,16,32,9,-2,13,19,-38,16,6,-9,5,-10,91,-18,30,6,37,-9,17,-13,-4,23,-33,5,-1,2,-16,-36,14,-1,-90,-4,37,4,22,-59,-5,31,53,40,-21,-24,-31,-16,13,16,-5,50,3,-21,36,4, 
  /* [13][0][][] */ 30,-16,-25,27,17,-2,4,1,-5,3,14,-2,15,-14,9,-22,25,-79,-34,18,-2,-19,15,6,0,6,-8,-7,-13,-27,-6,21,-4,9,11,42,27,-10,-8,15,6,9,18,36,22,11,-7,-127,24,-5,3,2,-12,-13,16,11,-11,11,21,13,9,17,-1,2,-3,-22,-24,-54,10,12,-11,-38,-13,30,-7,16,-29,1,21,-4,34,-7,-14,22,17,36,17,16,-3,2,31,-11,0,11,-17,-12, 
  /* [14][0][][] */ -108,-54,15,37,11,-21,-37,18,-14,11,-1,30,59,-2,-127,-7,60,-11,-5,29,-11,-26,39,6,-109,-2,29,-11,-44,-61,-17,9,-12,12,13,-63,26,41,-17,30,27,37,-15,-29,13,102,63,43,-89,39,15,32,-38,-15,32,2,5,-4,42,57,44,39,5,47,8,-22,-45,35,7,60,-40,-81,-61,7,-1,43,-14,23,87,-7,33,3,15,10,46,11,26,19,34,23,44,-10,-19,20,15,-27, 
  /* [15][0][][] */ 75,-23,36,11,-10,60,22,-12,-13,50,6,2,-79,-10,-7,49,12,46,53,1,19,20,-84,70,9,1,36,-2,16,37,-70,-80,-2,-40,34,-8,40,-26,-61,-102,8,6,-11,16,13,47,-8,-38,96,-40,-50,17,34,-102,48,-94,10,-38,6,29,-127,-21,15,22,75,-4,-59,44,-23,77,-24,27,53,19,23,2,20,-56,44,-28,-22,14,26,65,-21,-12,16,-41,-11,0,67,6,-54,63,12,4, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant30_scale = { 16, { 0.019856976345181465, 0.01130320131778717, 0.01110966969281435, 0.008771711029112339, 0.012685126625001431, 0.017021212726831436, 0.012784000486135483, 0.01579667441546917, 0.0073893172666430473, 0.013240295462310314, 0.015271962620317936, 0.02987307496368885, 0.01695404015481472, 0.01835489459335804, 0.02185811847448349, 0.014602658338844776, } };
const TfArray<16, int> quant30_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[16] = { -6019, 15017, -8861, 30154, 32405, 3061, -6896, -4117, 21574, 13277, 28617, 18424, -15345, 14275, 36186, -27569, };
const TfArray<1, int> tensor_dimension31 = { 1, { 16 } };
const TfArray<16, float> quant31_scale = { 16, { 0.00046722296974621713, 0.00026595767121762037, 0.00026140399859286845, 0.00020639320428017527, 0.00029847357654944062, 0.00040049912058748305, 0.00030080002034083009, 0.00037168647395446897, 0.00017386629770044237, 0.00031153636518865824, 0.0003593403089325875, 0.00070289592258632183, 0.00039891860797069967, 0.00043187988921999931, 0.00051430868916213512, 0.00034359196433797479, } };
const TfArray<16, int> quant31_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[96*1*1*16] = { 
  /* [0][0][][] */ 5,44,-16,111,-4,85,31,1,53,49,-79,100,16,-127,30,-109, 
  /* [1][0][][] */ -1,41,9,-34,38,-20,127,-76,2,74,-22,-27,-18,-44,22,17, 
  /* [2][0][][] */ -125,20,-9,-31,-19,35,73,127,-34,76,78,-5,-98,52,111,-48, 
  /* [3][0][][] */ -84,81,24,64,-77,62,89,114,13,76,-127,14,59,-86,-65,-75, 
  /* [4][0][][] */ 6,8,25,60,-29,68,0,57,14,-23,13,19,9,7,-127,-42, 
  /* [5][0][][] */ -6,-17,66,12,22,-39,4,13,-63,127,-36,-121,-25,32,-105,-30, 
  /* [6][0][][] */ 21,-4,17,8,37,71,-62,-62,-1,4,54,-7,127,-10,0,-55, 
  /* [7][0][][] */ 36,12,127,-24,-23,-54,-3,4,-95,23,-75,-50,22,-7,33,-15, 
  /* [8][0][][] */ 2,18,65,38,-29,70,-4,57,29,-9,21,-92,-21,-2,-127,-61, 
  /* [9][0][][] */ 36,-127,72,48,25,-5,-15,5,70,9,64,-1,-34,25,-72,-22, 
  /* [10][0][][] */ -17,-90,-9,-21,-98,27,-17,31,92,127,40,-26,-22,69,62,-5, 
  /* [11][0][][] */ 54,-12,4,-85,17,-42,-103,-127,-40,37,14,-11,35,-17,38,-45, 
  /* [12][0][][] */ 25,19,14,-20,-3,-29,-124,-12,-52,-109,29,20,37,127,52,38, 
  /* [13][0][][] */ -13,-44,-65,17,-23,-47,4,-45,60,31,-3,-19,21,17,127,31, 
  /* [14][0][][] */ -11,-79,76,86,22,65,26,127,35,63,44,-39,10,35,-81,124, 
  /* [15][0][][] */ 19,-26,0,71,18,7,109,1,4,-127,31,-31,-1,-24,4,-43, 
  /* [16][0][][] */ 31,-69,-85,36,11,-40,21,-107,106,84,98,25,17,124,98,127, 
  /* [17][0][][] */ -110,-53,38,90,127,72,-22,-5,90,-78,35,-98,55,54,-98,57, 
  /* [18][0][][] */ -25,15,3,20,-102,38,-8,24,-64,-7,-15,-59,-25,-127,70,35, 
  /* [19][0][][] */ 77,-42,26,-111,127,18,-111,94,59,-63,35,30,25,53,46,64, 
  /* [20][0][][] */ 50,-9,49,-48,-38,-30,-61,42,-18,-72,68,3,39,40,-15,127, 
  /* [21][0][][] */ -61,-34,18,-53,-1,-8,-127,-108,-51,106,-34,-55,-126,-47,39,-33, 
  /* [22][0][][] */ 29,-26,24,-23,39,-67,17,-25,-127,31,-19,-61,-42,-5,78,-6, 
  /* [23][0][][] */ 9,11,9,-1,15,10,-13,-5,-7,-3,47,-5,127,-2,12,-37, 
  /* [24][0][][] */ -24,-8,1,-39,-53,14,87,57,-14,4,22,-127,2,-109,33,13, 
  /* [25][0][][] */ -115,7,-71,52,80,-93,-47,-78,-39,127,-95,-100,-51,-102,36,-20, 
  /* [26][0][][] */ 8,12,47,-127,70,-45,-17,-5,115,-72,63,-66,-12,75,4,98, 
  /* [27][0][][] */ 100,-30,21,-38,-42,-52,-3,-11,-24,11,-127,23,22,-17,-3,35, 
  /* [28][0][][] */ -109,-61,-109,-113,127,1,124,-26,15,66,-124,-95,46,26,-125,70, 
  /* [29][0][][] */ -95,-32,-44,127,16,-26,-32,-52,-11,-33,-96,79,35,-83,21,-44, 
  /* [30][0][][] */ 56,-19,127,-3,22,65,-14,89,-58,-85,79,-55,-20,20,-91,58, 
  /* [31][0][][] */ 9,-76,17,-52,1,-76,12,-28,-1,41,74,2,-22,95,48,127, 
  /* [32][0][][] */ -12,68,-35,34,-127,17,-64,-43,-58,-26,-6,41,15,43,35,54, 
  /* [33][0][][] */ 27,-18,5,127,22,19,16,-57,-121,23,84,2,5,-13,15,120, 
  /* [34][0][][] */ 118,4,61,-5,85,-61,-127,-39,-83,121,-94,-28,-22,7,1,35, 
  /* [35][0][][] */ 60,-4,-19,16,12,-127,-19,2,-15,-3,-54,5,61,7,-8,27, 
  /* [36][0][][] */ 24,-1,-127,16,28,1,-28,40,-32,-23,2,-9,-1,14,-3,17, 
  /* [37][0][][] */ 5,39,127,2,-65,47,38,-51,-7,63,-68,-3,41,-17,7,-15, 
  /* [38][0][][] */ -127,42,30,68,22,52,6,-2,46,-23,98,19,-36,39,0,-73, 
  /* [39][0][][] */ -22,-7,9,30,25,-21,-127,45,7,40,-5,-38,5,-13,17,7, 
  /* [40][0][][] */ 32,63,-31,127,7,51,25,10,-78,-46,-90,77,81,73,-41,3, 
  /* [41][0][][] */ 0,18,-5,-8,-25,19,127,88,-34,97,-40,0,-33,65,13,-8, 
  /* [42][0][][] */ 17,-69,-30,6,41,14,-38,74,107,-35,127,0,-25,36,-63,32, 
  /* [43][0][][] */ -71,-5,21,-33,55,16,-27,-42,-28,48,-20,-58,-127,-2,23,-5, 
  /* [44][0][][] */ 9,2,-26,-13,-4,-34,11,-46,127,-4,17,36,32,88,23,45, 
  /* [45][0][][] */ -48,-68,4,-84,34,-14,-19,48,7,-77,-28,-24,37,90,-24,127, 
  /* [46][0][][] */ -22,20,-23,91,-85,-13,9,-80,-127,53,-45,-16,-4,22,-13,-32, 
  /* [47][0][][] */ -12,8,-127,120,-7,66,12,-49,23,67,70,76,-27,-36,30,2, 
  /* [48][0][][] */ 4,-9,53,-127,45,-15,-15,29,-56,3,61,25,-43,66,109,0, 
  /* [49][0][][] */ 18,9,59,127,-71,81,-73,4,56,-77,-76,13,-31,-14,-93,-98, 
  /* [50][0][][] */ 9,60,21,-127,61,10,-7,45,118,-16,-49,3,4,-53,26,-45, 
  /* [51][0][][] */ 20,-40,14,2,68,-42,-85,-127,-22,-84,7,-21,30,-25,-8,-3, 
  /* [52][0][][] */ 25,29,-20,37,16,-50,-61,127,-90,92,-25,-19,108,117,-11,-18, 
  /* [53][0][][] */ -28,92,-10,-96,-50,15,47,-11,-45,-42,-2,65,-5,-127,-94,-30, 
  /* [54][0][][] */ -18,3,2,36,44,-9,11,-35,7,40,-6,-19,-7,127,-32,-22, 
  /* [55][0][][] */ -126,127,117,-28,69,0,-9,0,-50,42,86,-51,-23,-30,107,10, 
  /* [56][0][][] */ 69,-19,33,-70,56,-16,-7,26,79,-28,14,127,-3,4,95,31, 
  /* [57][0][][] */ -12,1,21,75,-26,23,37,127,-14,2,8,-29,-2,52,14,14, 
  /* [58][0][][] */ 9,111,10,-127,10,42,-22,6,99,-19,12,80,-18,-88,41,61, 
  /* [59][0][][] */ 48,54,63,-125,-38,-26,23,1,32,11,46,-78,-8,-127,-95,19, 
  /* [60][0][][] */ 51,1,117,-27,-39,127,17,-31,-16,23,-51,-9,16,17,20,-33, 
  /* [61][0][][] */ -22,44,-70,-56,-70,39,120,127,-45,75,-13,-10,3,54,19,-37, 
  /* [62][0][][] */ -25,-17,-8,10,-26,-22,-40,37,-53,-16,-22,-77,25,-127,62,-18, 
  /* [63][0][][] */ 4,-24,6,-89,46,0,-112,-127,-46,90,-11,6,45,8,30,-40, 
  /* [64][0][][] */ -34,-3,27,47,77,2,-26,-127,28,-103,-21,-40,-21,-18,-3,-5, 
  /* [65][0][][] */ -127,23,35,-61,19,83,53,-65,-89,46,31,-23,-13,26,-9,-18, 
  /* [66][0][][] */ 64,14,92,28,-36,38,-16,47,-39,8,48,-104,-11,75,-127,-23, 
  /* [67][0][][] */ 36,-48,-28,106,66,-49,-96,-115,55,-123,-79,-41,-127,-1,-84,-11, 
  /* [68][0][][] */ 10,-48,-66,68,-64,-66,1,-39,-44,13,70,-56,-46,64,127,-61, 
  /* [69][0][][] */ -14,57,-45,70,16,-127,20,87,87,-11,64,11,90,61,-39,26, 
  /* [70][0][][] */ 11,4,-44,-35,-40,2,127,87,-23,49,-22,8,26,37,9,6, 
  /* [71][0][][] */ 23,-4,-32,-52,16,-10,12,54,-38,-43,-19,-14,14,-127,69,22, 
  /* [72][0][][] */ 20,44,-1,45,19,-14,-28,-127,28,62,-35,11,32,53,22,45, 
  /* [73][0][][] */ -33,-127,-36,-46,-88,-15,31,-44,-26,12,-13,-24,45,-60,59,-31, 
  /* [74][0][][] */ -24,22,76,80,6,8,-127,78,10,-47,-38,-30,-12,-17,-13,23, 
  /* [75][0][][] */ -75,13,-45,-24,33,29,43,77,14,40,-13,-64,-127,39,46,68, 
  /* [76][0][][] */ 32,-50,-32,2,71,-75,-127,-90,-31,-22,-1,-37,63,-16,29,-6, 
  /* [77][0][][] */ -28,30,-38,-15,-42,-19,-28,-42,127,-8,-55,25,5,65,44,-62, 
  /* [78][0][][] */ -95,-127,-3,79,69,55,-63,25,-8,-67,-122,55,55,-27,77,81, 
  /* [79][0][][] */ 31,-35,34,-33,127,28,70,26,66,46,5,34,14,-28,17,-71, 
  /* [80][0][][] */ 15,-35,79,-125,-29,1,38,44,-65,-30,-1,-49,-26,127,-42,25, 
  /* [81][0][][] */ 20,17,66,23,8,60,-26,-14,-28,-28,-1,-48,2,31,-127,14, 
  /* [82][0][][] */ -111,-26,44,-110,-15,-6,11,-79,-11,-3,-22,-120,-32,-127,-85,-12, 
  /* [83][0][][] */ -1,29,-42,-57,-33,-41,-1,49,-87,14,-9,-88,38,-127,16,29, 
  /* [84][0][][] */ 127,19,2,53,-60,2,-64,3,-35,-19,90,-2,-43,4,101,-56, 
  /* [85][0][][] */ -15,-21,9,-36,45,-41,-69,96,-81,-127,-53,-3,7,87,109,-105, 
  /* [86][0][][] */ 48,-17,19,9,-39,68,-33,55,-127,-73,15,-50,-11,-83,-31,39, 
  /* [87][0][][] */ 107,-29,9,13,-50,-36,-16,-14,-29,41,-127,14,55,-11,6,7, 
  /* [88][0][][] */ 45,79,-46,-32,8,-77,-64,-14,107,-39,1,39,-5,-19,95,-127, 
  /* [89][0][][] */ 41,61,-44,-7,-41,3,37,-41,30,63,-2,-51,-17,1,-14,-127, 
  /* [90][0][][] */ 9,-5,-9,-86,-54,13,127,-73,103,-83,42,-116,67,-21,-28,16, 
  /* [91][0][][] */ 23,19,-11,-73,-50,-12,15,-36,-45,14,63,71,12,-12,53,127, 
  /* [92][0][][] */ 17,7,0,12,65,-29,-71,-127,37,-71,-13,-34,-23,-22,-1,-16, 
  /* [93][0][][] */ 73,2,65,-127,-30,1,-3,67,25,-60,56,-25,-25,90,-35,33, 
  /* [94][0][][] */ -107,52,-107,11,96,-127,-36,-39,-5,-35,105,-44,37,-16,-41,-15, 
  /* [95][0][][] */ -8,70,28,-127,9,-8,-49,-2,36,-26,-50,-93,2,36,-79,-13, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant32_scale = { 96, { 0.00054050964536145329, 0.00084836338646709919, 0.00041880848584696651, 0.00021200413175392896, 0.00060954719083383679, 0.0006892642704769969, 0.0016356651904061437, 0.00092314108042046428, 0.00027148216031491756, 0.0010882632341235876, 0.0009858917910605669, 0.00066273187985643744, 0.00038395999581553042, 0.00068909628316760063, 0.00017520163964945823, 0.0011864315019920468, 0.00061636947793886065, 0.00045226022484712303, 0.00046619819477200508, 0.00060687382938340306, 0.00085143028991296887, 0.001256264396943152, 0.00054431386524811387, 0.0019352168310433626, 0.0021095837000757456, 0.00069797481410205364, 0.00047392889973707497, 0.00057996751274913549, 0.00063285959186032414, 0.00024012933135963976, 0.00016793873510323465, 0.00047656943206675351, 0.00054241926409304142, 0.00088593299733474851, 0.0004211145278532058, 0.00088847626466304064, 0.00098584126681089401, 0.0010012595448642969, 0.00039966276381164789, 0.0023502539843320847, 0.00052089104428887367, 0.00059993349714204669, 0.00017939679673872888, 0.0012581659248098731, 0.00039395655039697886, 0.000586668960750103, 0.0007848672685213387, 0.00046348222531378269, 0.00023046722344588488, 0.0007312868838198483, 0.00074210856109857559, 0.00059331569354981184, 0.00085102644516155124, 0.00069893634645268321, 0.0013199273962527514, 0.00056593184126541018, 0.00074237684020772576, 0.00039132920210249722, 0.0010225087171420455, 0.00055982783669605851, 0.00099665205925703049, 0.00026821991195902228, 0.00081278278958052397, 0.00061633135192096233, 0.00089110748376697302, 0.00072747259400784969, 0.00072362966602668166, 0.00075689959339797497, 0.00073333177715539932, 0.00068724434822797775, 0.00078469503205269575, 0.00051366956904530525, 0.00035179374390281737, 0.00062700401758775115, 0.0014640333829447627, 0.0011190359946340322, 0.0008344886009581387, 0.0010808545630425215, 0.0010150234447792172, 0.00083837209967896342, 0.00033791788155212998, 0.00046303807175718248, 0.00056832487462088466, 0.00044340139720588923, 0.0011168989585712552, 0.0008211915846914053, 0.00076799659291282296, 0.00014825334073975682, 0.00049681880045682192, 0.00072788761463016272, 0.00065620819805189967, 0.0011603385210037231, 0.00077103567309677601, 0.00057338690385222435, 0.00061166047817096114, 0.00039424686110578477, } };
const TfArray<96, int> quant32_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[96] = { 2908, 6177, 15914, 39614, 17736, -5170, -1816, 6348, 31583, -4350, 9842, 4731, 12176, 12033, 49993, 1766, 2101, 10183, 17328, 6886, -340, 693, 13280, -1195, 4487, 500, 17174, 8876, 9414, 52974, 61449, 18883, 11268, -987, 16958, 2278, 1992, 5262, 23852, -905, 12902, 9514, 55183, -2810, 29971, 9328, 7902, 21295, 64370, 10359, -441, 10453, -4817, -462, -2868, 7049, -435, 17463, 7383, 9425, 5679, 19049, 6519, 5737, 10044, 9320, 6503, -6310, 8368, -3531, 5246, 11125, 21542, 5942, -3797, -4358, 7123, 202, 2722, -1618, 22274, 13234, 5622, 15544, 3711, 255, 10970, 94551, 10227, 10951, 7080, -249, 6962, 9722, 6926, 15608, };
const TfArray<1, int> tensor_dimension33 = { 1, { 96 } };
const TfArray<96, float> quant33_scale = { 96, { 0.00014917527732905, 0.00023413985036313534, 0.00011558696860447526, 5.8511028328211978e-05, 0.0001682289585005492, 0.00019023007189389318, 0.00045142730232328176, 0.00025477775488980114, 7.4926370871253312e-05, 0.00030034981318749487, 0.00027209630934521556, 0.0001829074026318267, 0.00010596913489280269, 0.00019018370949197561, 4.8353907914133742e-05, 0.00032744326745159924, 0.00017011183081194758, 0.00012481931480579078, 0.00012866605538874865, 0.00016749113274272531, 0.00023498627706430852, 0.00034671646426431835, 0.00015022519801277667, 0.00053410057444125414, 0.0005822241073474288, 0.00019263409194536507, 0.00013079965719953179, 0.00016006526129785925, 0.00017466294229961932, 6.6273300035391003e-05, 4.634941797121428e-05, 0.00013152841711416841, 0.000149702318594791, 0.00024450867203995585, 0.00011622341844486073, 0.00024521059822291136, 0.00027208236861042678, 0.00027633766876533628, 0.00011030294263036922, 0.00064864667365327477, 0.00014376074250321835, 0.00016557566414121538, 4.9511727411299944e-05, 0.00034724126453511417, 0.00010872808343265206, 0.00016191479517146945, 0.00021661554637830704, 0.00012791647168342024, 6.3606661569792777e-05, 0.00020182789012324065, 0.00020481456886045635, 0.0001637492241570726, 0.00023487482394557446, 0.0001928994752233848, 0.00036428682506084442, 0.00015619155601598322, 0.00020488860900513828, 0.00010800296149682254, 0.00028220220701768994, 0.00015450690989382565, 0.00027506603510119021, 7.4026022048201412e-05, 0.00022431995603255928, 0.00017010130977723747, 0.00024593679700046778, 0.00020077519002370536, 0.00019971457368228585, 0.00020889674487989396, 0.00020239227160345763, 0.00018967258802149445, 0.0002165680198231712, 0.00014176768308971077, 9.7091571660712361e-05, 0.00017304686480201781, 0.00040405863546766341, 0.00030884277657605708, 0.00023031054297462106, 0.00029830509447492659, 0.00028013635892421007, 0.00023138234973885119, 9.3261965957935899e-05, 0.00012779390090145171, 0.00015685200924053788, 0.00012237437476869673, 0.00030825298745185137, 0.00022664069547317922, 0.00021195941371843219, 4.0916445868788287e-05, 0.00013711703650187701, 0.00020088972814846784, 0.00018110692326445132, 0.00032024187385104597, 0.00021279817156028003, 0.00015824908041395247, 0.00016881219926290214, 0.00010880820627789944, } };
const TfArray<96, int> quant33_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*96] = { 
  /* [0][0][][] */ -50,-71,-8,127,22,69,79,-57,-16,-18,-15,-4,-29,3,36,6,-8,-41,27,23,21,-127,127,8,-82,15,49,-29,-127,-127,38,23,10,30,60,-19,-31,-9,32,-5,-14,28,-111,76,24,-67,38,44,-18,47,-24,21,2,-6,15,50,-90,-49,-62,-18,-8,4,9,38,66,-27,73,14,-10,19,20,127,23,24,26,1,-10,20,127,-4,-17,14,-28,19,127,20,-74,-16,5,-32,-17,-45,2,-24,-16,23, 127,-127,76,106,-42,127,42,-116,67,4,-17,127,127,-101,-14,19,13,127,127,-113,127,-79,80,71,-110,-121,-63,-34,-59,47,-61,-20,-91,50,-127,-86,-43,-16,-54,60,-2,127,127,84,-53,-113,-110,-53,-14,-127,43,89,66,-31,45,85,-45,43,-82,-111,-42,-39,-62,67,71,-64,26,34,-79,32,-18,89,117,127,12,27,2,60,-34,52,64,127,127,-23,-7,75,-110,127,-108,-103,4,-127,-91,-127,-40,103, -76,-14,31,-81,15,-27,68,-7,78,-34,-27,19,-18,-8,-9,-8,-7,-16,7,-6,-19,-101,32,1,-127,103,6,-55,116,51,-16,8,0,10,10,-31,-11,33,20,15,25,13,-125,72,18,-16,36,12,-15,7,-16,5,-11,1,-3,23,-69,7,-34,53,1,43,32,0,-7,-42,-31,25,11,6,-3,36,11,-26,-8,8,-11,-3,-88,4,-23,-26,-17,3,-108,11,-32,-22,-46,23,-26,-38,29,-24,-15,1, 
  /* [0][1][][] */ -68,-73,74,-37,-48,92,20,127,-52,-22,-1,-118,26,-112,78,34,-3,-61,-17,90,54,-74,49,49,-97,-6,127,-22,-18,62,123,-103,-127,91,-83,-56,-38,33,-27,95,-47,-26,-4,42,-50,127,-23,65,15,92,20,0,19,-54,30,32,127,123,-73,-84,127,-29,-35,127,70,-39,-15,-2,127,40,127,96,-40,102,-5,11,15,17,-33,12,-46,119,-80,109,4,32,-56,31,78,-127,-32,-11,127,-67,-24,0, 65,125,57,-115,127,83,88,39,-127,127,127,-37,-63,-127,-127,127,127,-64,-125,-51,107,89,-123,127,-112,-99,-42,127,-127,109,-127,-127,-88,127,106,127,127,-127,-108,127,-64,-98,112,-127,-127,-36,-127,-127,127,-108,83,50,127,127,127,-127,100,-127,-127,127,19,-78,-127,-99,-127,127,-127,127,-124,-127,-110,-84,-127,-79,127,127,-127,127,-80,127,127,32,-44,-127,61,127,93,47,127,10,127,-1,-69,34,127,-127, -55,-13,-49,39,-56,-98,36,-25,18,-35,-28,92,2,95,15,13,-2,61,-6,126,5,-95,-39,6,-84,103,-72,-20,-72,-16,16,-61,-69,41,4,-19,-31,45,-67,44,127,-5,-42,29,-40,-57,17,45,7,114,-11,7,-33,-72,6,19,91,3,2,22,-36,127,90,-51,-44,11,37,-10,-75,123,-19,-87,0,-54,-18,-19,28,21,76,-35,-72,-43,55,15,-43,-15,71,23,16,63,-44,14,-44,97,-28,-5, 
  /* [0][2][][] */ -73,4,-2,-21,12,-45,53,24,54,-31,-37,-2,17,24,-26,-1,-9,64,7,3,-49,-85,4,-14,-19,-58,37,-69,100,37,25,24,15,-13,-9,-46,-6,39,-2,4,-15,-8,-70,97,2,30,12,35,-15,-28,9,-20,25,-1,8,14,-70,26,-18,14,16,2,-21,-3,0,-48,-45,15,-32,14,24,30,14,-22,25,4,19,8,-77,-10,-9,-10,14,16,-127,6,11,-44,-52,-48,-28,-43,9,57,-20,-9, 121,33,-127,-35,-71,-23,32,30,-66,-32,-19,-107,-75,118,-13,32,1,-54,-9,-127,91,-58,-38,-5,-115,127,-49,21,-37,-20,-10,-7,-62,9,26,7,-22,-28,127,59,14,-17,66,-40,-39,74,-67,-43,-32,-4,-127,-127,-44,-25,0,39,-65,-7,12,40,-5,-19,7,-46,-54,33,61,-23,117,107,-26,-71,13,-58,0,5,101,7,51,22,13,-97,-51,1,4,12,127,38,-51,38,-20,-103,40,77,-11,24, -58,13,-16,28,16,-68,-127,3,-13,-11,-15,5,14,-25,20,-2,-8,-18,5,17,-45,-73,16,-3,16,-101,18,3,-52,-39,-8,15,42,-24,-6,-27,-35,3,42,-38,25,-4,-52,-29,3,67,23,16,-9,-3,8,-9,23,6,-5,-5,-64,-13,0,-36,-12,10,83,-9,34,-3,-1,28,3,7,-4,19,-16,16,-4,16,37,4,76,-11,4,-11,-8,-18,74,0,41,-39,58,41,-18,-53,-9,2,-16,-14, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant34_scale = { 96, { 0.0042787119746208191, 0.0039205830544233322, 0.0045119253918528557, 0.0092215929180383682, 0.0091712484136223793, 0.0070007522590458393, 0.0028846047352999449, 0.0035878184717148542, 0.010449171997606754, 0.006435624323785305, 0.011225419119000435, 0.0052685411646962166, 0.012307731434702873, 0.008797110989689827, 0.018031973391771317, 0.0062814238481223583, 0.0095826247707009315, 0.0066682333126664162, 0.0075599858537316322, 0.002784401411190629, 0.002814149484038353, 0.0019860872998833656, 0.0060911555774509907, 0.0034338857512921095, 0.0041170818731188774, 0.0035746395587921143, 0.0072779529727995396, 0.0069133504293859005, 0.003543253755196929, 0.019363563507795334, 0.015895413234829903, 0.0097670909017324448, 0.0047490396536886692, 0.0068091973662376404, 0.011447200551629066, 0.018016068264842033, 0.016024863347411156, 0.0097647663205862045, 0.0097136888653039932, 0.0042961719445884228, 0.0090483035892248154, 0.010229265317320824, 0.013058625161647797, 0.0045813871547579765, 0.014562943950295448, 0.0042676231823861599, 0.0043432405218482018, 0.012095808982849121, 0.029872313141822815, 0.0043012355454266071, 0.017266001552343369, 0.008142898790538311, 0.009847632609307766, 0.0067422096617519855, 0.0081591410562396049, 0.0049287481233477592, 0.0061977151781320572, 0.017621058970689774, 0.0019529231358319521, 0.0066222944296896458, 0.012866557575762272, 0.014690747484564781, 0.004819903988391161, 0.0070200464688241482, 0.0058356262743473053, 0.0056765261106193066, 0.011113239452242851, 0.013037046417593956, 0.0086902668699622154, 0.0043350988999009132, 0.0093444213271141052, 0.0041373958811163902, 0.012741127051413059, 0.0060811997391283512, 0.01231873407959938, 0.012047666124999523, 0.0064812302589416504, 0.0038905870169401169, 0.0019782462622970343, 0.00738541129976511, 0.0090304436162114143, 0.0098354415968060493, 0.0067995418794453144, 0.011382774449884892, 0.0019886263180524111, 0.0046234619803726673, 0.0032742954790592194, 0.021007919684052467, 0.012445377185940742, 0.0048890267498791218, 0.014499044045805931, 0.0014490165049210191, 0.0071558053605258465, 0.0046597123146057129, 0.013273783959448338, 0.011718577705323696, } };
const TfArray<96, int> quant34_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[96] = { 23997, 61092, -93, -246, 15203, -5012, -248, -88, 6736, 16135, -3984, -752, 402, 3804, 5209, -9441, -4028, -349, -560, 16108, -11799, 21694, -3173, 9253, 34882, 394, -5833, 18747, 15370, -19775, 2324, 22374, 24183, -10037, 2427, 138, -603, -486, 3816, -7988, -5847, 843, -8554, -207, 30845, -1726, 11916, -443, -14535, 2439, -39, -1064, -2338, 17648, -4233, 14857, 19546, -388, 36891, -265, -9223, -1272, 1637, -614, -1340, 13723, -1267, -7267, -3377, 3966, 418, -3497, 585, 154, -2468, -6621, -856, -2679, 55733, -7784, -5376, -10861, 176, 315, 75071, -13418, -10296, -27832, -7681, 9419, -2346, 33324, 812, -2244, -3199, 1452, };
const TfArray<1, int> tensor_dimension35 = { 1, { 96 } };
const TfArray<96, float> quant35_scale = { 96, { 0.00010067557741422206, 9.2249014414846897e-05, 0.0001061629518517293, 0.00021697866031900048, 0.00021579409076366574, 0.00016472359129693359, 6.7873057560063899e-05, 8.4419261838775128e-05, 0.00024586287327110767, 0.00015142645861487836, 0.00026412750594317913, 0.00012396567035466433, 0.00028959367773495615, 0.0002069908514386043, 0.00042428172309882939, 0.00014779821503907442, 0.0002254735300084576, 0.00015689960855524987, 0.00017788202967494726, 6.5515327150933444e-05, 6.6215281549375504e-05, 4.673146759159863e-05, 0.00014332130376715213, 8.0797311966307461e-05, 9.6872514404822141e-05, 8.4109167801216245e-05, 0.00017124594887718558, 0.0001626670709811151, 8.337067993124947e-05, 0.00045561327715404332, 0.00037400971632450819, 0.00022981391521170735, 0.00011174211249453947, 0.0001602164120413363, 0.00026934591005556285, 0.00042390750604681671, 0.00037705560680478811, 0.00022975921456236392, 0.00022855738643556833, 0.0001010863998089917, 0.000212901271879673, 0.00024068860511761159, 0.00030726176919415593, 0.00010779735021060333, 0.00034265749854966998, 0.00010041466157417744, 0.0001021938951453194, 0.0002846072893589735, 0.00070287799462676048, 0.00010120554361492395, 0.00040625885594636202, 0.00019159761723130941, 0.00023170901113189757, 0.00015864023589529097, 0.00019197979418095201, 0.0001159705498139374, 0.00014582859876099974, 0.00041461316868662834, 4.5951132051413879e-05, 0.00015581869229208678, 0.00030274252640083432, 0.00034566465183161199, 0.00011340950732119381, 0.00016517756739631295, 0.00013730885984841734, 0.00013356532144825906, 0.00026148799224756658, 0.00030675405287183821, 0.00020447687711566687, 0.00010200232645729557, 0.00021986874344293028, 9.7350493888370693e-05, 0.00029979122336953878, 0.00014308706158772111, 0.00028985258541069925, 0.00028347451006993651, 0.00015249953139573336, 9.1543224698398262e-05, 4.6546971134375781e-05, 0.00017377438780386001, 0.000212481027119793, 0.000231422163778916, 0.00015998922754079103, 0.00026782997883856297, 4.6791206841589883e-05, 0.00010878734610741958, 7.7042248449288309e-05, 0.00049430399667471647, 0.00029283241019584239, 0.00011503592395456508, 0.00034115399466827512, 3.4094508009729907e-05, 0.00016837188741192222, 0.00010964029206661507, 0.00031232432229444385, 0.00027573123225010931, } };
const TfArray<96, int> quant35_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[16*1*1*96] = { 
  /* [0][0][][] */ -21,-13,6,-33,18,-10,-45,-5,20,9,-8,11,-11,-8,-24,7,-4,7,-5,-7,12,-34,4,-4,5,13,3,127,33,-37,37,-15,-3,0,4,4,-10,14,-47,-4,-13,12,9,38,2,11,18,0,25,4,-6,10,8,-21,-9,79,5,4,-32,-41,-11,29,-1,-28,-42,-63,-15,37,10,5,26,-19,-9,-29,1,-24,-29,15,-3,11,3,-25,29,23,0,-14,-11,-85,-3,-13,4,-4,39,-44,-30,-5, 
  /* [1][0][][] */ 41,-59,-87,-74,127,-16,83,29,-17,-100,-75,-15,11,0,-61,47,-68,27,39,58,13,47,-14,-51,13,-5,-11,-65,46,-12,-68,46,-18,36,-8,-13,17,-10,16,48,-35,34,-36,-29,-39,95,5,-21,21,-92,5,-30,-24,42,57,15,-72,-34,-26,-27,18,-6,-3,-36,-94,114,-17,-20,-10,-19,-29,16,55,-118,-27,5,17,-47,39,10,-6,-33,32,0,-43,29,-15,24,43,-24,-4,22,34,10,43,103, 
  /* [2][0][][] */ -9,52,-100,-18,72,72,24,78,-2,-127,-15,-17,25,-21,26,27,28,-16,-11,60,23,13,83,41,66,25,-3,-59,56,3,56,-46,17,37,-14,30,-119,-57,62,49,40,-67,-13,-31,25,-27,7,97,-2,37,-30,13,113,-3,-6,45,3,19,35,0,10,3,29,-14,24,-12,-20,3,-44,21,-28,-13,-37,-54,-1,53,35,63,16,-14,1,-40,18,-5,-19,37,1,29,-12,36,12,-28,-13,-14,-57,-15, 
  /* [3][0][][] */ 68,17,98,-12,52,-27,19,1,-30,-68,14,-57,16,29,28,113,40,-17,44,17,126,12,44,39,81,-29,-14,12,38,34,8,81,-96,20,32,-14,-34,-16,-12,34,-63,-34,43,5,34,54,-59,-58,-57,-39,-48,42,10,-127,8,27,-98,71,79,48,24,69,-4,-41,24,65,-17,-59,9,3,-20,-60,61,-47,45,29,17,12,60,18,-58,-67,6,-15,-38,36,27,23,22,6,30,51,40,122,38,-68, 
  /* [4][0][][] */ 26,-21,49,-10,127,45,-23,-37,-36,-53,-32,-33,-68,17,-8,44,5,-79,-55,90,-26,-20,34,-37,-21,-2,16,-42,-17,-40,44,-50,96,-10,-38,24,51,2,-11,12,-56,6,-16,-6,-23,-57,-14,0,17,-2,-29,-21,-10,-39,8,-13,51,-25,-43,24,-17,67,65,20,48,33,-16,-17,-59,-16,57,59,16,-74,-45,-38,48,11,83,-26,10,-55,3,-11,-74,-11,38,54,-74,26,-11,-50,8,-15,21,-14, 
  /* [5][0][][] */ -2,-9,-41,7,33,-16,49,-23,-16,-44,-17,19,8,30,8,21,8,-7,29,-5,42,27,-41,85,36,-15,15,-101,16,41,30,27,-14,23,16,-44,29,47,31,5,13,-16,8,-35,7,0,6,0,-5,-7,14,8,-5,-24,-6,-55,-24,20,-23,12,78,3,-8,50,0,60,4,85,7,102,10,38,10,21,0,82,-55,8,16,2,-21,0,5,15,-5,26,-16,127,5,39,4,-23,-1,31,-52,24, 
  /* [6][0][][] */ 21,-70,9,-32,-20,9,52,20,6,7,-15,-68,-28,8,-25,40,32,-3,3,-8,-35,47,6,11,-12,-14,-19,6,-6,25,51,0,60,36,72,-13,-9,-5,32,-92,-6,91,0,-45,19,-18,-18,16,-3,42,-24,80,-30,-62,-3,-12,-9,-61,-2,1,0,58,35,-73,26,-23,7,-13,-2,14,127,0,-44,5,-26,37,-91,11,12,0,16,50,14,-4,-19,6,42,23,21,20,49,-31,-12,11,-22,-12, 
  /* [7][0][][] */ -3,127,25,11,112,41,56,-23,-25,-28,39,-6,-7,32,28,34,26,-32,11,24,42,-16,26,20,11,1,9,9,33,-5,30,27,33,20,-33,-1,14,25,16,84,-23,20,9,9,-9,-22,30,-16,-15,-18,34,27,12,-41,-29,36,27,13,-12,-1,1,-47,-4,4,-56,78,-25,-74,-5,-15,-7,53,-16,-26,21,23,39,73,34,-16,-60,-26,-17,-6,-10,61,-4,0,-16,39,-28,-30,-48,4,29,-5, 
  /* [8][0][][] */ -10,10,51,32,-110,-21,62,-26,44,93,56,14,-19,23,38,12,-36,10,1,1,-33,1,-127,75,26,-52,67,12,15,12,2,46,79,-6,12,-2,-15,-5,19,32,31,-10,42,6,-29,10,40,5,-107,17,24,31,-74,-23,-32,58,1,-61,-87,-13,25,-21,-39,6,10,73,-15,-57,19,-19,-51,-33,43,48,57,-2,-25,-22,-8,19,-87,10,-30,-26,18,19,82,40,20,-15,55,41,19,11,48,20, 
  /* [9][0][][] */ 19,-126,-9,12,90,92,-54,-57,34,-46,97,90,-30,8,88,-106,-6,-32,-21,18,-74,-80,41,-27,-60,31,1,24,-51,-6,-20,-10,33,-22,-127,47,12,-3,-57,66,0,-72,-2,88,-15,-21,-83,-56,13,18,-22,-124,77,34,-18,-46,5,73,-18,3,-2,-49,-28,118,-88,-26,-10,-36,-9,12,-76,-88,45,-18,-8,16,91,-98,32,14,14,-43,1,27,-9,-82,25,-13,-11,-48,-71,35,-52,-46,-20,-46, 
  /* [10][0][][] */ -52,-14,-51,-43,-17,-8,81,-15,32,26,26,38,36,-3,-2,6,13,21,-21,-21,2,47,12,26,5,-21,7,-127,40,-35,64,-28,0,36,3,-16,-11,40,22,-4,29,-41,16,-60,22,-3,29,21,7,48,-17,0,-45,-24,-3,-64,7,18,-2,-40,36,8,-6,13,-38,102,-14,-22,23,-18,-2,-20,-31,-8,26,72,-17,64,-22,11,-33,9,6,20,11,-11,-4,121,14,6,19,17,20,-21,43,-38, 
  /* [11][0][][] */ -88,36,-21,4,34,-66,-1,-5,-53,6,-13,23,36,39,-18,6,63,3,-62,-51,20,9,-17,11,94,-7,70,14,-9,38,-40,27,-6,49,-2,-24,-14,18,54,6,10,-5,-13,-10,105,21,68,27,70,42,2,66,-1,-58,35,-6,-94,-11,-33,-43,2,-12,-9,31,-13,-16,20,10,31,14,-11,33,-24,14,28,20,-41,111,-121,64,-50,8,-78,-89,127,24,52,-13,13,70,-19,-58,-29,69,-20,-1, 
  /* [12][0][][] */ 6,-21,-14,6,45,23,-14,-18,-17,14,21,-14,-12,-31,20,-21,-47,-19,8,-9,-22,-40,-27,35,-36,48,-15,81,-37,22,-36,-2,-10,3,-3,34,-13,-36,-14,3,-23,0,-4,22,-26,2,14,9,-20,-14,-8,-54,-8,7,-15,-4,11,-13,11,22,-25,-21,-3,31,38,-89,10,42,-36,-127,-6,47,8,0,6,62,27,-30,-2,0,-6,6,-40,2,6,-22,1,-50,-19,-1,0,-3,-29,19,-19,16, 
  /* [13][0][][] */ -89,59,6,2,-46,13,-13,4,-20,-16,40,21,75,21,-24,1,-18,26,-49,-5,20,-15,43,-52,69,19,5,14,10,-35,-25,-105,-84,-35,10,16,2,35,27,-35,-38,97,-1,22,47,14,-11,5,56,-14,33,64,63,-58,80,-3,-20,35,36,5,21,20,-10,29,4,-33,-3,-4,8,19,17,-127,17,-33,-74,9,55,41,-41,-46,79,-19,-13,-30,31,-35,99,-10,-25,0,-20,18,46,-37,-15,9, 
  /* [14][0][][] */ -25,10,0,-51,19,0,-25,21,-93,-2,18,2,-38,-75,-90,-30,-102,-17,70,12,28,-17,25,-116,-62,31,-52,-32,0,-31,-19,-37,-62,-53,14,27,-9,-19,-15,2,-16,95,-68,-1,-65,20,11,4,127,-36,19,-31,43,57,-108,26,-6,23,-107,13,-6,34,55,17,6,21,-1,-6,-61,19,61,37,37,-19,-34,3,72,-96,-29,-97,24,-46,13,51,30,-81,-44,5,-50,12,26,51,21,21,16,-19, 
  /* [15][0][][] */ -60,-77,-22,-34,11,7,-6,-69,-32,27,-5,-32,53,-10,56,-13,-102,-21,-15,6,-10,12,-86,-52,-8,-7,-4,25,-19,-11,80,-100,-3,36,38,5,-8,32,-97,7,44,-84,9,30,-24,-55,63,35,63,25,-5,-127,-16,52,-1,35,30,-5,-20,46,16,3,50,-7,2,2,-14,-4,-17,21,14,31,-47,9,4,-35,-44,-16,5,16,2,50,-10,71,-17,-44,-38,-32,-54,73,32,91,-44,-3,-3,-2, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant36_scale = { 16, { 0.033404789865016937, 0.016790283843874931, 0.010139822959899902, 0.0088515831157565117, 0.016943152993917465, 0.013996894471347332, 0.016165878623723984, 0.013999589718878269, 0.012336402200162411, 0.0093032894656062126, 0.027058709412813187, 0.022660752758383751, 0.016733866184949875, 0.0096558481454849243, 0.019495006650686264, 0.016929659992456436, } };
const TfArray<16, int> quant36_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[16] = { -7735, 13402, -13435, -7658, -1410, 5706, 19162, -54804, -13001, 30273, 18609, 3442, -40, 8734, 1375, 11510, };
const TfArray<1, int> tensor_dimension37 = { 1, { 16 } };
const TfArray<16, float> quant37_scale = { 16, { 0.00078599504195153713, 0.00039506552275270224, 0.00023858407803345472, 0.00020827255502808839, 0.0003986624360550195, 0.00032933871261775494, 0.0003803736180998385, 0.00032940212986432016, 0.00029026830452494323, 0.00021890093921683729, 0.00063667551148682833, 0.00053319416474550962, 0.0003937380388379097, 0.00022719643311575055, 0.00045870605390518904, 0.00039834494236856699, } };
const TfArray<16, int> quant37_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[96*1*1*16] = { 
  /* [0][0][][] */ -39,94,13,-127,-55,-26,-54,-79,-14,8,11,100,20,-59,-9,65, 
  /* [1][0][][] */ -24,30,-64,-14,-24,-41,34,-91,53,62,-68,5,6,0,42,-127, 
  /* [2][0][][] */ -7,3,-55,59,20,46,-54,-60,127,-64,24,51,-3,88,-68,31, 
  /* [3][0][][] */ 57,-77,14,-127,12,-33,-8,-19,108,0,71,38,-17,31,17,120, 
  /* [4][0][][] */ -81,56,11,53,-4,-21,-16,41,7,31,21,-30,-127,-15,-29,11, 
  /* [5][0][][] */ 6,70,112,0,6,75,-79,85,-62,87,-28,-40,50,-51,-127,29, 
  /* [6][0][][] */ 27,-76,126,-127,30,13,-56,115,-73,-123,71,-23,-4,106,-17,86, 
  /* [7][0][][] */ 46,111,-29,-78,109,2,13,-61,127,107,-37,8,25,-32,56,55, 
  /* [8][0][][] */ 14,-82,22,-102,34,-67,27,-87,19,80,73,-33,19,127,97,73, 
  /* [9][0][][] */ 5,-33,-17,127,40,0,41,-57,-52,98,34,-11,-12,-54,-14,-19, 
  /* [10][0][][] */ -14,23,-52,-127,4,11,-19,42,41,-47,30,-17,-23,-41,2,40, 
  /* [11][0][][] */ 7,20,28,-26,88,-40,85,-64,-91,43,-6,23,-4,127,-66,-23, 
  /* [12][0][][] */ 85,-52,-104,-34,20,-114,28,3,15,48,-88,-59,-25,127,5,41, 
  /* [13][0][][] */ -14,9,-22,5,6,-127,-2,15,3,-5,3,-7,12,-13,10,13, 
  /* [14][0][][] */ 55,-27,91,-26,64,16,-127,-80,-10,-63,43,38,11,-54,-37,-38, 
  /* [15][0][][] */ -93,14,-19,-26,-14,17,127,64,-38,33,88,-14,36,76,66,8, 
  /* [16][0][][] */ 5,60,127,103,-13,29,72,75,-82,1,-61,8,9,19,8,-89, 
  /* [17][0][][] */ -36,-102,-10,24,-66,-27,-54,18,-127,-25,10,-52,-1,36,55,-35, 
  /* [18][0][][] */ -2,54,19,70,45,2,23,3,68,48,-32,-37,18,127,61,24, 
  /* [19][0][][] */ 20,-50,33,4,76,0,-83,-63,-106,-66,-46,-127,-24,-44,9,-34, 
  /* [20][0][][] */ 94,-20,-50,-58,25,-127,21,37,-63,51,-117,-35,10,-5,14,7, 
  /* [21][0][][] */ 112,-4,97,-17,-3,-1,-4,127,-11,-107,73,30,10,113,29,96, 
  /* [22][0][][] */ -35,27,-35,127,-66,13,70,51,3,21,-1,61,-11,17,35,16, 
  /* [23][0][][] */ 47,16,102,-90,58,30,-15,71,27,-6,22,-13,5,-18,-127,14, 
  /* [24][0][][] */ -127,39,10,-23,0,117,27,-16,-8,3,116,0,-63,9,63,-23, 
  /* [25][0][][] */ 20,27,11,27,9,8,58,-52,-1,-127,-10,-14,-10,-28,14,8, 
  /* [26][0][][] */ -37,4,2,1,-43,-16,-35,-29,-117,-31,-3,-43,13,127,-39,61, 
  /* [27][0][][] */ -6,18,2,62,31,-26,-18,-30,54,3,-21,6,7,127,-2,14, 
  /* [28][0][][] */ 24,61,59,51,127,-12,30,33,-88,-20,-51,-38,13,86,41,-27, 
  /* [29][0][][] */ 7,-10,12,13,27,-7,7,29,-27,-9,-21,-127,4,-17,-14,8, 
  /* [30][0][][] */ -14,83,-46,64,-34,-24,46,-127,-47,61,-21,-10,56,33,73,83, 
  /* [31][0][][] */ -51,-31,-19,-64,-13,20,-50,-115,31,87,-3,-127,-41,-56,10,35, 
  /* [32][0][][] */ -127,-71,-16,62,55,31,-23,4,-12,-49,-108,46,70,1,59,79, 
  /* [33][0][][] */ -13,-32,-38,-17,-88,-8,-77,10,62,21,8,-57,37,-127,126,35, 
  /* [34][0][][] */ 43,-14,62,27,37,22,-54,77,-82,-55,74,29,10,-3,-15,127, 
  /* [35][0][][] */ -49,64,-67,24,-30,0,20,-103,95,56,-47,31,-21,-5,49,-127, 
  /* [36][0][][] */ -33,19,-7,127,15,31,108,8,-4,26,-16,3,-17,35,-49,-64, 
  /* [37][0][][] */ -5,-18,2,-65,-9,9,-47,-57,-72,-24,12,4,-4,-127,71,-40, 
  /* [38][0][][] */ 50,81,-17,-55,127,-11,22,-40,112,92,-28,-12,26,-39,72,19, 
  /* [39][0][][] */ -36,50,-17,-127,-26,12,-51,27,52,-80,-21,-13,10,78,50,26, 
  /* [40][0][][] */ -12,-38,11,-103,-14,-6,-20,-49,-127,-13,1,-17,-19,-116,106,-74, 
  /* [41][0][][] */ -5,-18,-40,-18,1,-18,17,-7,-21,3,-29,0,-127,20,20,30, 
  /* [42][0][][] */ 127,98,-21,-14,-72,-40,-9,-50,10,23,83,-57,-60,56,85,-117, 
  /* [43][0][][] */ -28,116,-100,13,42,-12,105,-49,62,76,-35,11,28,-127,-76,-71, 
  /* [44][0][][] */ -15,-6,12,-50,69,-7,-81,-127,-24,2,5,-6,-5,-42,61,-58, 
  /* [45][0][][] */ 3,62,-127,-71,47,-93,31,-65,5,50,-7,-109,27,-22,46,-9, 
  /* [46][0][][] */ 4,-6,-23,-87,-19,15,14,-36,-120,-30,16,21,-12,-127,77,-37, 
  /* [47][0][][] */ 19,55,25,-12,127,-10,-23,20,-53,45,-1,17,11,-2,110,-19, 
  /* [48][0][][] */ -127,-72,-18,30,78,10,18,-14,-6,-9,-121,33,69,4,76,56, 
  /* [49][0][][] */ 11,19,98,71,112,-11,44,36,-127,-42,-40,-85,22,112,25,-47, 
  /* [50][0][][] */ 19,3,-102,-3,29,-127,-54,-14,-14,-28,4,-40,26,-14,-4,6, 
  /* [51][0][][] */ -1,46,50,20,31,14,5,33,-123,55,15,-109,7,-127,-31,96, 
  /* [52][0][][] */ 7,32,-15,53,40,3,19,36,69,70,-20,-41,34,127,63,16, 
  /* [53][0][][] */ -1,-53,-13,-30,-83,-16,-94,4,36,13,14,-53,19,-98,127,30, 
  /* [54][0][][] */ 68,-26,-54,-12,127,73,-124,-44,-99,6,-47,-108,7,-48,-2,-29, 
  /* [55][0][][] */ 42,-10,5,8,33,-35,-75,-127,-34,-68,-55,10,1,-19,27,-4, 
  /* [56][0][][] */ -14,18,21,-25,-9,-31,-94,63,-13,127,-5,-19,29,3,-4,3, 
  /* [57][0][][] */ 8,25,-44,-22,-48,-53,127,85,-34,39,-19,-12,31,15,106,-5, 
  /* [58][0][][] */ 42,23,-117,43,89,127,-31,53,-106,-47,3,16,-29,38,-4,-33, 
  /* [59][0][][] */ -114,69,111,30,-92,-61,127,127,27,-2,39,-9,14,15,68,-4, 
  /* [60][0][][] */ -3,-7,-50,2,22,-127,-27,-14,-8,-16,-1,-28,16,-15,11,-1, 
  /* [61][0][][] */ 26,-4,41,127,92,25,37,15,-99,6,13,33,-16,25,25,-54, 
  /* [62][0][][] */ -44,127,10,-57,-31,-16,-67,57,-29,-56,-95,-64,-2,-98,-56,-36, 
  /* [63][0][][] */ -50,31,-20,127,-81,10,-67,-31,-68,-15,-29,-51,25,67,43,35, 
  /* [64][0][][] */ 15,6,8,42,2,8,-8,76,26,5,-15,-47,-9,-127,41,-2, 
  /* [65][0][][] */ -22,-47,2,-127,31,-46,49,-46,-3,43,14,-105,-22,7,29,-63, 
  /* [66][0][][] */ 22,-29,48,-10,-17,6,-19,91,9,-77,50,47,3,127,31,69, 
  /* [67][0][][] */ 9,51,-16,-127,-2,-10,-49,31,72,-84,-33,-14,30,70,66,37, 
  /* [68][0][][] */ -29,25,127,13,11,-3,-6,6,-44,-10,-25,-44,18,-10,79,-31, 
  /* [69][0][][] */ 127,90,-14,5,-75,-36,-12,-27,3,29,78,-56,-62,44,59,-87, 
  /* [70][0][][] */ 30,-9,-67,-5,-33,34,55,127,-29,86,-31,13,2,67,-30,13, 
  /* [71][0][][] */ 16,7,-3,0,11,-80,8,28,-39,21,-86,-6,-127,-4,35,52, 
  /* [72][0][][] */ 0,12,-127,18,5,15,22,73,-32,-29,13,-2,16,15,2,1, 
  /* [73][0][][] */ -39,19,42,0,51,-34,-63,-127,20,-66,28,-27,12,-48,32,-15, 
  /* [74][0][][] */ 10,40,50,127,26,-15,-81,97,-73,22,-51,36,23,-117,32,-93, 
  /* [75][0][][] */ -1,46,-53,7,30,-13,34,-10,127,34,-26,-15,25,114,-60,0, 
  /* [76][0][][] */ -7,-12,1,23,0,-10,-15,66,19,-32,-16,-127,-5,-4,6,11, 
  /* [77][0][][] */ -17,25,-14,127,-50,31,67,86,20,25,1,45,-14,-6,-9,-4, 
  /* [78][0][][] */ 13,-26,7,-103,24,-29,-43,13,27,-67,20,-14,19,127,34,41, 
  /* [79][0][][] */ -7,-107,-83,-77,-87,-12,35,-84,127,19,28,48,17,42,66,-49, 
  /* [80][0][][] */ -36,8,110,-116,28,-57,9,-91,-76,56,-54,-127,27,92,85,-40, 
  /* [81][0][][] */ -44,56,-121,20,73,-127,-10,62,-5,-40,59,-13,24,-1,6,-3, 
  /* [82][0][][] */ 122,-13,-1,1,22,-127,-23,8,-25,-7,-110,-16,91,-2,1,28, 
  /* [83][0][][] */ -27,74,-105,-69,-29,-29,46,-117,58,58,-56,-127,21,48,48,89, 
  /* [84][0][][] */ -27,49,87,-50,18,-36,76,-127,-48,68,-24,-84,37,49,61,1, 
  /* [85][0][][] */ -87,127,18,-103,-81,-23,-27,-10,-52,-9,-64,30,8,-13,-86,-34, 
  /* [86][0][][] */ -12,10,-38,12,-32,-18,127,25,15,-50,12,30,9,34,60,-29, 
  /* [87][0][][] */ -17,-35,7,-109,10,-40,42,-15,-8,23,-16,-127,-12,-3,8,-36, 
  /* [88][0][][] */ 86,-24,39,-11,21,-122,5,20,-31,28,-127,-57,17,35,75,-26, 
  /* [89][0][][] */ 25,-25,-36,-64,33,-18,-32,-7,-42,14,38,-93,127,4,32,-44, 
  /* [90][0][][] */ -10,-73,29,-61,55,2,-68,80,64,-90,-25,-9,-11,127,28,-118, 
  /* [91][0][][] */ -53,-7,-31,-37,13,-9,-38,-106,16,59,-2,-127,-40,-11,9,7, 
  /* [92][0][][] */ -25,21,34,22,-4,-127,13,0,4,-26,3,-8,1,-23,23,0, 
  /* [93][0][][] */ 38,-29,127,-11,-55,49,24,-37,-33,28,-73,-26,-15,4,41,14, 
  /* [94][0][][] */ 27,-9,-10,-28,22,-14,-23,-6,-33,-23,16,-57,127,-7,37,-35, 
  /* [95][0][][] */ 127,82,2,22,-95,-15,-63,-8,-20,-40,110,-27,-50,29,84,-66, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant38_scale = { 96, { 0.00065398961305618286, 0.0010798765579238534, 0.00081327068619430065, 0.00080361904110759497, 0.00079709116835147142, 0.0011617976706475019, 0.00034589614369906485, 0.0008265034994110465, 0.00048806439735926688, 0.00095059367595240474, 0.0004350647795945406, 0.00067151023540645838, 0.00060129951452836394, 0.0037951015401631594, 0.00055633665760979056, 0.00052789394976571202, 0.00036583072505891323, 0.00071161234518513083, 0.001185358501970768, 0.00086320738773792982, 0.00033507621265016496, 0.00019034274737350643, 0.00042491737985983491, 0.00025646088761277497, 0.00046567516983486712, 0.0015828126342967153, 0.0017751484410837293, 0.0010844923090189695, 0.00061382114654406905, 0.0011052076006308198, 0.00053362833568826318, 0.00068836694117635489, 0.00058883405290544033, 0.00060985662275925279, 0.0008264153148047626, 0.00069174059899523854, 0.00045640449388884008, 0.00053912133444100618, 0.00085462984861806035, 0.00084047275595366955, 0.00035222119186073542, 0.0014753008726984262, 0.00079712970182299614, 0.00041297607822343707, 0.0011887812288478017, 0.00048935867380350828, 0.00067323271650820971, 0.00068155996268615127, 0.00075549696339294314, 0.00062641268596053123, 0.00069301720941439271, 0.00052405305905267596, 0.0015176169108599424, 0.00056442059576511383, 0.0008765561506152153, 0.00086801708675920963, 0.0013612997718155384, 0.00098343926947563887, 0.00089354394003748894, 0.00050426088273525238, 0.0023091984912753105, 0.0010600581299513578, 0.00067277863854542375, 0.0010737724369391799, 0.0014137884136289358, 0.00071956973988562822, 0.00023967308516148478, 0.00052438897546380758, 0.0012715386692434549, 0.0011166719486936927, 0.00068209011806175113, 0.00061823189025744796, 0.0020873136818408966, 0.00096562918042764068, 0.00075114151695743203, 0.00048990972572937608, 0.00074443250196054578, 0.00029391830321401358, 0.00024461650173179805, 0.00056114030303433537, 0.00034112186403945088, 0.00042973624658770859, 0.00044535732013173401, 0.00047395614092238247, 0.00028214231133460999, 0.00080471293767914176, 0.0018026592442765832, 0.00055499147856608033, 0.00028809093055315316, 0.0011658984003588557, 0.00064645218662917614, 0.00060916692018508911, 0.00088293151929974556, 0.0011810642899945378, 0.00092047610087320209, 0.00045588263310492039, } };
const TfArray<96, int> quant38_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[96] = { -2668, 4081, 8204, 3073, -3712, -3533, 26704, 2450, 3469, -1927, 12668, -250, -11798, 2090, 15390, 6088, 14189, 5691, -4576, -5421, 5236, 39620, 20086, 18062, 1268, 848, 4694, 2751, 2404, -4940, 7717, -3177, -250, 5295, 34, 922, 11589, 5500, -1950, 5870, 10044, 4870, 5220, 15629, 4507, 5795, 2061, 8773, 5005, -5813, -6384, 455, -287, -1530, 2525, -92, 221, -721, -4816, 10165, -897, 1685, -1094, -1999, -3675, 7386, 25169, 2227, -2520, 830, 1591, 2349, 1809, -1221, 631, 12362, -543, 17619, 20791, -932, 12193, 2144, -403, 1540, 18028, 8264, 3620, 1569, 6702, 4880, -431, -9098, 673, -2443, -1944, -2521, };
const TfArray<1, int> tensor_dimension39 = { 1, { 96 } };
const TfArray<96, float> quant39_scale = { 96, { 0.00023467653954867274, 0.00038750108797103167, 0.00029183269361965358, 0.00028836930869147182, 0.00028602685779333115, 0.00041689752833917737, 0.00012412079377099872, 0.00029658112907782197, 0.00017513621423859149, 0.00034110943670384586, 0.00015611790877301246, 0.00024096360721159726, 0.00021576930885203183, 0.0013618278317153454, 0.00019963491649832577, 0.00018942858150694519, 0.00013127407873980701, 0.00025535377790220082, 0.00042535204556770623, 0.00030975189292803407, 0.00012023818271700293, 6.8302273575682193e-05, 0.00015247664123307914, 9.2027992650400847e-05, 0.00016710210184101015, 0.00056797382421791553, 0.00063699128804728389, 0.00038915738696232438, 0.00022026254737284034, 0.00039659082540310919, 0.00019148629507981241, 0.0002470124454703182, 0.0002112962247338146, 0.00021883992303628474, 0.0002965494932141155, 0.00024822304840199649, 0.00016377541760448366, 0.00019345739565324038, 0.00030667393002659082, 0.0003015938273165375, 0.00012639045598916709, 0.0005293944850564003, 0.00028604068211279809, 0.00014819164061918855, 0.00042658025631681085, 0.00017560063861310482, 0.00024158169981092215, 0.00024456981918774545, 0.00027110124938189983, 0.00022478087339550257, 0.00024868114269338548, 0.00018805032595992088, 0.00054457911755889654, 0.0002025357389356941, 0.00031454194686375558, 0.00031147777917794883, 0.0004884865484200418, 0.00035289570223540068, 0.00032063780236057937, 0.00018094813276547939, 0.00082862889394164085, 0.00038038947968743742, 0.00024141876201611012, 0.00038531070458702743, 0.0005073214415460825, 0.00025820918381214142, 8.6003885371610522e-05, 0.00018817085947375745, 0.00045627678628079593, 0.00040070468094199896, 0.00024476007092744112, 0.00022184528643265367, 0.00074900814797729254, 0.00034650476300157607, 0.00026953837368637323, 0.0001757983845891431, 0.00026713090483099222, 0.00010546915291342884, 8.7777771113906056e-05, 0.00020135864906478673, 0.00012240759679116309, 0.00015420583076775074, 0.00015981127216946334, 0.00017007363203447312, 0.00010124347318196669, 0.00028876183205284178, 0.00064686319092288613, 0.00019915221491828561, 0.00010337806452298537, 0.00041836901800706983, 0.00023197181872092187, 0.00021859243861399591, 0.00031682965345680714, 0.000423811114160344, 0.00033030210761353374, 0.00016358816355932504, } };
const TfArray<96, int> quant39_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*96] = { 
  /* [0][0][][] */ 7,47,24,-89,-84,10,-8,58,-24,-40,-119,-88,-115,104,-61,59,33,81,13,-6,-44,-104,-44,20,80,-107,-4,99,52,-90,63,-7,-89,75,27,-72,-31,3,-100,-28,-105,-50,97,-74,57,-24,-90,96,-111,90,-101,20,-29,67,-3,42,-73,-94,-19,28,-26,81,27,-127,59,-117,-105,40,39,-90,-13,107,-62,24,-54,103,-51,-62,-36,-29,-112,41,58,20,-49,-73,-59,-56,21,33,21,50,-99,-95,-60,38, 
  /* [1][0][][] */ 60,-1,72,40,2,-82,-1,118,27,45,-79,64,-127,-104,23,-84,-59,-42,0,-38,102,83,-90,-73,17,-3,-37,-71,86,40,-28,-73,-109,-94,-101,-90,34,-70,-45,13,2,108,-10,32,34,2,-44,36,8,-114,-13,-50,-15,-125,-53,-108,37,34,103,3,58,-92,-47,-45,104,-15,-5,88,61,87,48,115,-1,22,47,34,66,-75,119,-34,-84,107,-73,80,30,18,-115,33,-57,-66,51,-49,-44,14,35,2, 
  /* [2][0][][] */ -5,-71,-90,-127,-31,5,65,-4,18,-51,-71,-57,51,70,-76,-118,-101,29,-51,27,-98,-58,23,19,-69,63,-50,-55,-30,-38,-88,27,50,-72,45,1,-83,16,-81,61,52,-39,105,71,-69,-24,45,20,-21,-70,-1,85,-94,-81,-4,-85,-53,18,68,107,90,76,-69,96,108,85,-80,-86,-3,13,59,-29,28,12,-21,-76,89,109,-108,-80,-92,107,73,27,-78,31,38,26,66,73,78,112,-57,-38,75,78, 
  /* [3][0][][] */ -77,100,62,-89,111,105,78,68,110,27,41,-61,118,41,110,119,-127,82,-64,107,-81,78,-83,1,120,81,-102,18,55,38,-43,115,-101,32,27,-95,-97,-40,-96,-61,-91,-42,-63,21,-74,-107,-27,-36,-57,109,-23,-102,8,54,104,-71,-96,-110,69,-97,-87,36,-94,7,13,93,-58,-41,-35,-38,80,3,88,92,-55,-80,-124,-57,83,-53,60,107,-93,-90,78,-121,102,-91,-39,-113,98,102,-89,-49,35,-27, 
  /* [4][0][][] */ -102,22,86,-20,68,9,-26,-47,14,60,-105,-57,-86,94,28,-102,85,39,-45,-86,-96,78,-118,-28,-33,-113,89,40,13,-122,115,29,-121,42,-58,-57,99,-20,-124,-102,107,96,-104,-107,-20,89,-42,-44,114,-31,112,112,89,-125,-5,35,-114,-30,120,-58,79,-34,-20,63,-60,30,-117,-86,16,94,32,-11,-62,-14,18,-72,-29,86,-41,31,31,-114,48,2,51,120,11,-66,-32,-14,95,50,96,-18,-114,-127, 
  /* [5][0][][] */ -101,107,-49,-58,25,-23,-43,62,-16,-86,55,37,-88,34,104,103,-107,115,85,-4,110,8,-50,106,-127,48,-33,-61,-23,35,64,5,-80,67,61,56,103,-56,-56,-38,78,-1,-12,-52,100,116,9,-6,23,107,94,52,-80,-42,50,-34,108,-41,-60,69,59,57,-4,61,71,-50,45,48,97,-63,41,9,-99,79,16,-84,-48,60,33,-15,78,103,-87,-38,51,-27,-90,-6,82,108,-41,110,-15,99,6,83, 
  /* [6][0][][] */ 127,-13,42,-73,-103,10,71,-67,11,65,46,111,43,-69,10,107,-40,82,80,38,-95,123,103,57,-46,76,-101,-66,-35,-110,6,11,-74,23,92,74,-74,-29,29,61,-71,43,75,27,-85,72,-66,-10,62,79,30,-15,-46,-100,-40,-53,-76,-19,18,88,31,-12,97,-34,107,80,2,47,-51,-76,-27,-23,77,-43,117,120,-46,71,-29,-68,19,-7,-17,-107,78,14,2,92,-9,-88,-63,-89,-80,-12,81,-72, 
  /* [7][0][][] */ 75,39,-62,-122,94,-22,-38,-63,18,-86,-16,-38,-52,104,92,56,70,-10,-34,48,68,-105,-20,-65,105,-84,47,98,-102,-33,-21,8,-124,-48,57,-39,108,-10,-2,-106,-114,29,-68,75,4,-68,-96,-63,56,-55,-38,100,-48,35,54,24,51,-117,-9,-116,13,-87,-53,-61,-9,-64,-118,-105,45,-114,-127,2,-109,60,-40,60,-78,-56,-82,5,-113,35,0,64,-70,-88,-22,-86,42,110,116,-87,24,-90,86,-110, 
  /* [8][0][][] */ -69,-61,-116,-15,85,5,-22,-105,90,-114,126,-104,-43,-102,-121,-2,26,83,77,-89,102,65,102,-56,-72,-110,18,-102,-78,-91,-104,-1,-51,-4,-87,117,-117,-104,-61,-74,-20,26,45,-22,-11,-61,-27,100,67,93,-49,-20,121,17,-13,-104,3,-9,-23,25,-112,-16,-111,105,-10,-40,10,-74,-73,39,-110,59,40,86,127,91,100,-5,-13,-40,42,102,-6,66,77,-51,-25,76,63,61,-67,81,-106,122,120,-51, 
  /* [9][0][][] */ -33,-44,19,75,32,53,78,25,10,41,61,53,102,47,-36,-29,-16,-66,-72,-87,-96,75,16,-29,-70,-69,-49,46,57,-120,-37,44,-88,-71,113,-35,-36,-9,-80,-70,97,83,-6,-1,33,48,21,-27,-32,-50,-104,-68,-113,22,16,67,-11,-85,1,1,-9,-67,26,73,-127,69,65,59,92,-69,-113,9,41,16,60,-113,101,-73,8,-36,-119,-48,77,-88,51,-76,-94,11,-77,82,35,8,-89,17,21,62, 
  /* [10][0][][] */ -91,44,-80,-95,-47,88,-127,-108,81,-104,84,68,2,29,71,-9,108,12,-76,35,-14,-65,-45,82,47,106,-34,-28,-116,-80,-15,-117,74,34,112,-117,115,-87,41,113,83,26,30,56,-17,24,-7,-9,-88,116,93,109,99,-102,93,56,15,-15,72,-15,72,70,97,65,-42,102,-3,55,5,-13,71,24,-103,-106,26,56,68,97,77,16,-6,40,5,21,11,72,-88,22,-17,32,-53,92,48,70,17,-5, 
  /* [11][0][][] */ 67,55,-74,-96,110,2,-43,-94,-92,48,37,-3,-2,-73,45,-73,-109,69,-22,-65,-43,-42,63,-77,-99,78,68,85,10,40,-2,39,34,75,-107,-77,14,108,-67,-80,45,-109,101,-107,74,23,-109,-23,43,93,-81,93,71,-82,-48,-104,-9,78,-127,76,-49,3,108,-52,59,-29,89,-16,93,92,-38,21,-91,-62,17,-96,-6,72,-77,-27,-90,-29,-114,93,1,-77,-50,-26,-78,44,-51,-52,80,34,110,2, 
  /* [12][0][][] */ -75,-23,-81,106,25,-13,-59,-81,-24,12,-52,36,-54,-92,-51,58,29,-43,45,120,-93,-37,55,42,-20,85,-85,-5,99,-83,69,83,36,-36,-6,-63,-1,-89,66,58,76,77,49,-85,26,-15,-59,76,-93,120,-52,54,-35,-97,87,44,12,-55,-50,-103,53,-12,127,-1,-56,-11,-2,-63,-96,-78,28,-29,-108,-68,4,-24,-106,-25,75,-27,16,93,104,-18,57,-69,-19,-73,-73,-87,1,11,-90,-66,-95,112, 
  /* [13][0][][] */ 25,42,42,-76,75,14,24,-59,26,-90,26,14,-29,87,22,63,60,56,-35,99,112,-25,-21,-77,45,-90,7,-87,25,-82,-41,16,-29,-90,-11,-3,44,-96,56,35,-13,-58,64,70,49,2,51,54,-83,77,-39,7,-42,-73,9,89,50,-44,53,-70,-75,-43,69,-23,-77,43,-47,-102,-66,-59,-98,90,-64,-24,73,-36,-18,65,-17,-63,81,17,3,127,91,-42,-109,89,-37,-40,-7,-7,70,117,-3,-98, 
  /* [14][0][][] */ -52,-68,93,56,51,-93,20,-11,-8,67,-30,-70,-13,115,-27,39,-95,-31,-29,-106,-5,41,-53,-38,-55,-17,71,23,80,-93,80,-43,-52,99,119,25,31,79,-93,-94,113,125,121,26,84,-71,-1,-48,-113,11,-27,-68,-15,-123,96,-111,28,-94,-26,-103,-95,-110,22,-1,-12,68,8,-12,-119,-14,36,-62,-106,-79,50,-13,-92,-13,74,-6,127,-35,119,43,-78,-62,-66,83,59,-7,-77,-38,-18,-108,-75,-73, 
  /* [15][0][][] */ 18,48,-7,-78,-105,98,9,57,-124,-47,107,-37,-22,-60,-52,-41,-37,91,-122,18,-29,-94,-65,-28,-10,-11,103,111,-13,-80,-127,27,52,102,-58,-32,-33,104,-38,-99,-68,119,107,-65,82,55,-87,-98,24,-31,-39,-93,-83,-13,35,7,52,-23,104,-55,-119,-107,-103,-76,-54,32,-21,-86,-29,-85,-91,13,65,41,-9,85,-30,100,-112,-40,-27,-74,-51,-56,-55,-43,102,-35,62,-107,-95,108,-10,-53,114,-94, 
  /* [16][0][][] */ -12,21,-108,112,90,-72,97,103,-47,39,81,-75,-58,82,-127,-35,29,77,-63,-34,-125,-28,-111,9,110,-73,-85,17,-58,95,108,31,-88,-53,13,7,-19,88,-125,60,42,28,75,-61,-103,-19,-108,-67,-30,40,92,65,-47,-127,52,1,37,89,-47,-70,35,-29,-6,61,-17,27,65,-53,-4,-66,72,13,73,-8,44,-89,78,-61,-103,-60,-36,21,-17,-112,90,-71,-5,-119,106,-103,89,-114,42,20,70,-109, 
  /* [17][0][][] */ -29,89,-116,-41,-44,34,-44,104,28,-34,100,-18,-50,103,32,-62,27,79,-49,70,21,-16,-59,-14,-127,8,-35,-83,-38,41,65,-96,48,-39,-39,41,36,-54,-25,43,-40,117,-26,-79,106,26,-80,-93,29,-101,-12,-109,-74,11,48,29,-60,82,-53,-64,103,86,67,72,-60,39,-94,71,-71,-68,14,-19,-39,-40,-12,46,-111,-59,110,-113,-56,-10,94,-43,78,38,-48,105,17,122,-43,61,-95,-58,78,-46, 
  /* [18][0][][] */ 67,-109,-117,-28,61,20,-114,-97,-57,46,-83,-74,-19,97,23,36,24,91,-93,-47,-79,51,24,39,15,-19,41,-104,-15,-127,34,-109,-36,85,106,-56,33,-38,-69,-81,-100,26,117,-59,-24,46,96,-58,88,12,-46,-91,-42,-2,-30,36,79,25,-114,63,-96,-30,67,108,-17,29,-96,-108,100,-37,-73,90,-103,101,-4,118,31,91,-10,-31,-56,-52,-93,104,10,-61,98,22,77,32,-52,115,-92,-4,10,-120, 
  /* [19][0][][] */ 61,65,-110,75,109,80,-60,11,96,-40,8,-44,59,84,118,-45,38,-97,-46,121,-86,-83,29,125,52,-10,32,-32,85,43,114,-109,59,-22,-95,86,-108,-21,-65,21,71,43,52,52,-36,54,-107,108,123,35,88,-22,68,-84,90,110,65,13,-95,-45,-35,56,114,-49,100,-5,-76,91,116,-10,-94,13,17,82,15,97,13,88,-81,105,-103,-57,111,-90,46,18,87,-75,-74,-3,-28,15,-20,-41,92,-127, 
  /* [20][0][][] */ -4,-94,-18,63,94,22,83,45,-65,-75,18,1,-31,-95,-1,-100,-19,-62,112,35,57,-120,99,-28,-106,113,-88,22,1,-86,-55,1,52,101,85,-63,107,15,-116,21,100,-118,-95,-28,46,14,-45,-50,82,-17,120,-86,-1,92,23,-97,-67,-127,72,14,-42,101,70,72,27,99,32,-80,30,83,-79,21,-102,-102,-41,119,-15,-94,41,-74,11,106,85,-59,53,16,-79,-121,114,9,-113,-91,61,-67,22,86, 
  /* [21][0][][] */ 64,93,95,-86,-37,-52,-90,-52,-33,92,17,-94,-55,-78,-102,-104,-37,-29,-82,-101,-40,47,98,-58,84,21,70,-26,-62,-103,91,5,-109,18,91,90,-118,-87,-116,16,-3,43,-47,4,-82,87,-127,63,54,-118,-13,-71,53,-55,-113,-65,-37,-71,77,79,7,-49,-11,48,-51,41,-75,-8,-8,-62,-17,4,-44,-105,-65,-3,-90,97,102,70,-48,93,-7,-23,-124,-74,11,28,-48,40,-75,95,-38,-83,98,-38, 
  /* [22][0][][] */ -16,-72,83,-26,-84,-117,107,65,47,-38,-33,18,-54,26,-34,-122,-117,-19,-82,74,40,120,-23,85,-83,53,-81,76,-62,-97,-79,-94,-51,118,48,42,19,-112,-83,-73,-35,-11,-93,-6,66,-59,121,-90,-88,-43,-118,79,-88,114,-26,51,102,92,-83,92,-92,-24,-12,14,87,-125,-102,-21,66,104,-112,-52,-1,104,-100,-29,-125,-109,58,-33,100,-91,-118,-66,43,88,-41,109,19,95,121,16,-127,100,87,104, 
  /* [23][0][][] */ -52,-9,-1,-52,-118,13,59,15,8,-112,56,-116,-126,85,61,-55,30,35,52,27,53,97,56,-7,28,-65,-80,-76,-103,87,-13,120,65,-76,101,-35,-9,108,85,-90,116,41,95,-105,-113,-4,-107,106,18,103,-54,-12,-88,106,75,0,42,-7,62,-31,-55,47,85,-127,110,-103,4,-22,96,102,-75,113,106,22,18,-52,-114,13,-105,-40,-118,10,-100,-86,-60,-126,111,-118,-41,-80,-54,-91,1,-56,-73,103, 
  /* [24][0][][] */ -11,93,112,104,62,-18,-97,113,6,-96,-74,92,10,10,-1,-53,-17,49,-89,94,127,-18,-19,42,-39,71,-59,-59,95,118,105,-15,106,-40,-11,-22,21,-36,-79,-77,14,118,-70,52,-39,85,58,-58,-91,-48,33,-15,-58,85,124,-36,73,-36,-4,-20,118,33,59,-21,-116,4,-58,123,72,-77,-7,40,1,-96,-15,-32,33,-52,-22,60,78,-47,63,-36,-72,-60,-14,-49,-76,90,-54,-22,-60,-67,84,100, 
  /* [25][0][][] */ 36,5,54,89,13,38,-30,48,-18,39,74,66,-56,45,101,-46,4,-16,-26,-45,29,113,23,106,82,-6,-49,-4,59,15,-68,-1,-21,-47,125,90,-30,55,-54,98,-61,84,50,43,3,-82,-47,-58,-17,-3,-49,-51,7,-16,-101,-66,-13,-37,98,49,-80,127,-61,-22,-60,-74,-22,77,-39,7,61,26,53,65,23,33,-17,42,48,-28,-78,22,-58,-14,68,34,18,-8,-89,58,3,-46,-26,29,33,74, 
  /* [26][0][][] */ 82,-90,-1,3,93,-108,100,-46,46,-38,-94,1,-41,-75,34,-27,99,5,-76,-85,40,-56,66,89,12,-39,43,47,17,-11,-57,-49,-23,43,49,107,-6,87,-127,106,91,3,-35,-107,-12,45,113,7,14,48,85,-28,96,94,56,27,81,-5,-62,-20,8,119,-91,-123,48,-36,-112,-31,-6,-57,26,36,-116,-66,-90,-81,-26,18,-27,68,102,16,-58,-32,-19,-48,-14,-99,19,9,99,105,-57,51,36,-33, 
  /* [27][0][][] */ 61,39,-110,119,-31,-36,1,-12,-94,86,-35,-13,-124,70,76,-54,36,-117,-8,-119,-31,51,80,-95,-111,67,-45,51,83,-69,59,-127,111,-91,31,103,104,52,-86,-45,28,50,-28,56,63,-98,100,-76,-23,-70,56,85,104,54,-125,-91,81,-37,-29,6,31,-77,-119,-92,23,103,22,-97,31,-6,26,-111,17,-73,0,-87,-93,-8,67,31,-67,-82,82,-6,-113,-98,54,-42,104,11,48,99,84,25,57,-88, 
  /* [28][0][][] */ -127,121,-56,72,8,99,-106,-2,59,-66,-99,81,55,-71,22,-102,-69,80,26,103,108,77,10,-85,48,-68,83,112,-49,24,-19,50,-38,21,-42,-56,40,104,-36,123,-92,-24,-3,69,112,118,-14,8,115,9,-114,12,63,-41,31,69,107,49,49,88,52,-39,7,-117,-77,1,92,-47,-81,61,74,120,-113,54,119,32,70,-43,-9,64,-66,62,66,-17,60,19,-79,-55,-90,24,73,-83,56,65,-6,88, 
  /* [29][0][][] */ 21,-25,27,51,-41,-2,21,-99,-37,-42,-54,-88,85,-19,-82,-49,81,88,-74,97,35,-70,-97,-93,73,-78,-102,-46,-51,83,-62,25,-99,117,108,-7,-43,-97,43,-20,109,-59,-25,28,-84,63,-120,3,-33,65,46,40,-82,-12,83,104,43,-16,-61,-11,127,93,-82,31,69,-89,-120,64,62,-12,-45,-46,-49,-114,-37,-96,-67,20,3,72,-7,-46,38,-26,22,-124,-81,87,-11,32,-82,-63,-96,-15,-63,-66, 
  /* [30][0][][] */ -79,-91,-91,-54,66,98,58,10,-75,40,34,64,85,65,-105,-115,101,120,71,10,-7,-77,127,-73,0,62,-25,12,87,-46,12,53,-4,-28,22,33,-87,-31,86,-18,-6,-93,-69,-84,88,127,-35,-31,-65,116,-97,-41,-114,-18,102,-98,109,58,7,-2,-45,-116,51,82,119,105,31,72,96,83,118,-77,32,-113,-91,27,64,-26,-3,-45,56,52,109,50,87,-56,67,47,116,43,49,-120,18,85,-69,-86, 
  /* [31][0][][] */ 53,124,83,-34,-67,-7,103,-92,-85,-55,63,-66,-80,-93,99,23,-10,51,-25,25,-29,-43,103,5,93,96,-44,-60,-24,83,59,63,91,35,68,109,51,115,-21,-89,-7,107,-99,36,28,102,49,-10,-114,-30,-62,63,22,-93,-21,-10,0,33,29,121,-9,-122,120,-108,24,-102,83,-70,-122,38,116,-38,80,-67,-37,61,-12,89,58,-69,-9,-12,-120,-96,-34,81,127,-117,-78,87,49,-27,-59,-46,-123,92, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant40_scale = { 32, { 0.0018734467448666692, 0.0018245078390464187, 0.0018098276341333985, 0.0017671890091150999, 0.0017586903413757682, 0.0019232409540563822, 0.0020059281960129738, 0.0017899995436891913, 0.0017311444971710443, 0.0017964155413210392, 0.0017371488502249122, 0.0018322074320167303, 0.0019565238617360592, 0.0020994117949157953, 0.0017226730706170201, 0.0017699521267786622, 0.0017665225313976407, 0.0018281098455190659, 0.0018042247975245118, 0.0017123384168371558, 0.0017592225922271609, 0.0018553301924839616, 0.0017895175842568278, 0.0017288030358031392, 0.0018192940624430776, 0.0026078973896801472, 0.0017920718528330326, 0.0018255901522934437, 0.00179393554572016, 0.0017970966873690486, 0.0017511990154162049, 0.0016718038823455572, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { -306, 31, -343, -226, 90, 116, 1147, -449, 66, -352, -182, -96, -173, -299, 128, -166, -337, 143, 29, 131, -176, -553, 42, -199, 249, 1490, -263, -195, 88, -166, 259, -169, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 4.4081101805204526e-05, 4.2929597839247435e-05, 4.2584179027471691e-05, 4.1580919059924781e-05, 4.1380950278835371e-05, 4.525272743194364e-05, 4.7198311222018674e-05, 4.2117637349292636e-05, 4.0732811612542719e-05, 4.2268602555850521e-05, 4.0874092519516125e-05, 4.3110765545861796e-05, 4.6035856939852238e-05, 4.9397924158256501e-05, 4.0533483115723357e-05, 4.1645933379186317e-05, 4.1565235733287409e-05, 4.3014351831516251e-05, 4.2452349589439109e-05, 4.0290316974278539e-05, 4.1393472201889381e-05, 4.3654828914441168e-05, 4.2106297769350931e-05, 4.0677718061488122e-05, 4.2806921555893496e-05, 6.1362290580291301e-05, 4.2166397179244086e-05, 4.2955063690897077e-05, 4.221024937578477e-05, 4.228462785249576e-05, 4.1204682929674163e-05, 3.9336562622338533e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[2*1*1*32] = { 
  /* [0][0][][] */ -37,1,-39,-41,67,-6,127,-5,22,-69,-80,-55,66,-31,78,-10,-77,-7,45,11,71,-27,86,-34,-48,116,12,-78,-65,-82,5,21, 
  /* [1][0][][] */ 91,127,-89,-78,18,106,-5,-51,73,-102,-91,55,-63,5,36,84,-90,102,105,76,-70,0,-17,46,107,-22,-82,-91,64,71,121,-115, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant42_scale = { 2, { 0.0044328831136226654, 0.003305128775537014, } };
const TfArray<2, int> quant42_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[2] = { 20617, -27444, };
const TfArray<1, int> tensor_dimension43 = { 1, { 2 } };
const TfArray<2, float> quant43_scale = { 2, { 0.00022343578166328371, 0.00016659227549098432, } };
const TfArray<2, int> quant43_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.50192779302597046, } };
const TfArray<1, int> quant46_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.40604552626609802, } };
const TfArray<1, int> quant50_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.53365576267242432, } };
const TfArray<1, int> quant53_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.52528738975524902, } };
const TfArray<1, int> quant54_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.26181796193122864, } };
const TfArray<1, int> quant58_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.21273380517959595, } };
const TfArray<1, int> quant61_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.27599003911018372, } };
const TfArray<1, int> quant62_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.25780385732650757, } };
const TfArray<1, int> quant65_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.35883831977844238, } };
const TfArray<1, int> quant66_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.050404168665409088, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.095993533730506897, } };
const TfArray<1, int> quant69_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,8,9 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,12,13 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,14,15 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,16,17 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,18,19 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,20,21 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,22,23 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,24,25 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,26,27 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,28,29 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,30,31 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,32,33 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,34,35 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,36,37 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,38,39 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,40,41 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,42,43 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36912, (TfLiteIntArray*)&tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16128, (TfLiteIntArray*)&tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(size_t i, TfLiteEvalTensor *tensor) {
  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus trained_model_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus trained_model_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
